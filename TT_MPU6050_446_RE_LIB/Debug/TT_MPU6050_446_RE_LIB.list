
TT_MPU6050_446_RE_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057fc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080059c8  080059c8  000159c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf8  08005bf8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c00  08005c00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08005c78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005c78  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c113  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abb  00000000  00000000  0002c1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214bd  00000000  00000000  0002efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d936  00000000  00000000  0005045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca398  00000000  00000000  0005dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012812b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d50  00000000  00000000  0012817c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080059ac 	.word	0x080059ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	080059ac 	.word	0x080059ac

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <TT_Init_MPU6050>:
float angle_pitch_gyro,angle_roll_gyro,angle_yaw_gyro;
float Angle_Pitch_Acce,Angle_Roll_Acce;
float Filterd_Pitch,Filterd_Roll;
uint32_t Time;

void TT_Init_MPU6050(void){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af04      	add	r7, sp, #16

	  data[0]=0x00;
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_POWER_1,1,data, 1, 10000);
 8000ee0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	226b      	movs	r2, #107	; 0x6b
 8000ef2:	21d0      	movs	r1, #208	; 0xd0
 8000ef4:	481b      	ldr	r0, [pc, #108]	; (8000f64 <TT_Init_MPU6050+0x90>)
 8000ef6:	f001 fae1 	bl	80024bc <HAL_I2C_Mem_Write>
	  data[0]=0x02;
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000efc:	2202      	movs	r2, #2
 8000efe:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_CONFIG,1,data, 1, 10000);
 8000f00:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	221a      	movs	r2, #26
 8000f12:	21d0      	movs	r1, #208	; 0xd0
 8000f14:	4813      	ldr	r0, [pc, #76]	; (8000f64 <TT_Init_MPU6050+0x90>)
 8000f16:	f001 fad1 	bl	80024bc <HAL_I2C_Mem_Write>
	  data[0]=0x10;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_ACCE_CONFIG,1,data, 1, 10000);
 8000f20:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	221c      	movs	r2, #28
 8000f32:	21d0      	movs	r1, #208	; 0xd0
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <TT_Init_MPU6050+0x90>)
 8000f36:	f001 fac1 	bl	80024bc <HAL_I2C_Mem_Write>
	  data[0]=0x08;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_GYRO_CONFIG,1,data, 1, 10000);
 8000f40:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	2301      	movs	r3, #1
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <TT_Init_MPU6050+0x8c>)
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	221b      	movs	r2, #27
 8000f52:	21d0      	movs	r1, #208	; 0xd0
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <TT_Init_MPU6050+0x90>)
 8000f56:	f001 fab1 	bl	80024bc <HAL_I2C_Mem_Write>
	}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000008c 	.word	0x2000008c
 8000f64:	200000f4 	.word	0x200000f4

08000f68 <TT_Get_Gyro_Cal_Values>:
void TT_Get_Gyro_Cal_Values(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af04      	add	r7, sp, #16

	  for( int i=0;i<4000;i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e060      	b.n	8001036 <TT_Get_Gyro_Cal_Values+0xce>

		  HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADRR,MPU6050_GYRO_MESURE,1,Gyro_Cal_Buffer,6,HAL_MAX_DELAY);
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	9302      	str	r3, [sp, #8]
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	4b45      	ldr	r3, [pc, #276]	; (8001094 <TT_Get_Gyro_Cal_Values+0x12c>)
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	2243      	movs	r2, #67	; 0x43
 8000f86:	21d0      	movs	r1, #208	; 0xd0
 8000f88:	4843      	ldr	r0, [pc, #268]	; (8001098 <TT_Get_Gyro_Cal_Values+0x130>)
 8000f8a:	f001 fb91 	bl	80026b0 <HAL_I2C_Mem_Read>
		  Gyro_Cal_Raw_X=(Gyro_Cal_Buffer[0]<<8 | Gyro_Cal_Buffer[1]);
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <TT_Get_Gyro_Cal_Values+0x12c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <TT_Get_Gyro_Cal_Values+0x12c>)
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <TT_Get_Gyro_Cal_Values+0x134>)
 8000fa2:	801a      	strh	r2, [r3, #0]
		  Gyro_Cal_Raw_Y=(Gyro_Cal_Buffer[2]<<8 | Gyro_Cal_Buffer[3]);
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <TT_Get_Gyro_Cal_Values+0x12c>)
 8000fa6:	789b      	ldrb	r3, [r3, #2]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <TT_Get_Gyro_Cal_Values+0x12c>)
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <TT_Get_Gyro_Cal_Values+0x138>)
 8000fb8:	801a      	strh	r2, [r3, #0]
		  Gyro_Cal_Raw_Z=(Gyro_Cal_Buffer[4]<<8 | Gyro_Cal_Buffer[5]);
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <TT_Get_Gyro_Cal_Values+0x12c>)
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <TT_Get_Gyro_Cal_Values+0x12c>)
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <TT_Get_Gyro_Cal_Values+0x13c>)
 8000fce:	801a      	strh	r2, [r3, #0]

		  Gyro_Cal_X+=(float)Gyro_Cal_Raw_X;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <TT_Get_Gyro_Cal_Values+0x134>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fde:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <TT_Get_Gyro_Cal_Values+0x140>)
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <TT_Get_Gyro_Cal_Values+0x140>)
 8000fea:	edc3 7a00 	vstr	s15, [r3]
		  Gyro_Cal_Y+=(float)Gyro_Cal_Raw_Y;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <TT_Get_Gyro_Cal_Values+0x138>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <TT_Get_Gyro_Cal_Values+0x144>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <TT_Get_Gyro_Cal_Values+0x144>)
 8001008:	edc3 7a00 	vstr	s15, [r3]
		  Gyro_Cal_Z+=(float)Gyro_Cal_Raw_Z;
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <TT_Get_Gyro_Cal_Values+0x13c>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <TT_Get_Gyro_Cal_Values+0x148>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <TT_Get_Gyro_Cal_Values+0x148>)
 8001026:	edc3 7a00 	vstr	s15, [r3]

		  HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f000 fe4a 	bl	8001cc4 <HAL_Delay>
	  for( int i=0;i<4000;i++){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800103c:	db9a      	blt.n	8000f74 <TT_Get_Gyro_Cal_Values+0xc>

	  }

	  Gyro_Cal_X/=4000;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <TT_Get_Gyro_Cal_Values+0x140>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80010b4 <TT_Get_Gyro_Cal_Values+0x14c>
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <TT_Get_Gyro_Cal_Values+0x140>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_Cal_Y/=4000;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <TT_Get_Gyro_Cal_Values+0x144>)
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	eddf 6a16 	vldr	s13, [pc, #88]	; 80010b4 <TT_Get_Gyro_Cal_Values+0x14c>
 800105c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <TT_Get_Gyro_Cal_Values+0x144>)
 8001062:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_Cal_Z/=4000;
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <TT_Get_Gyro_Cal_Values+0x148>)
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	eddf 6a11 	vldr	s13, [pc, #68]	; 80010b4 <TT_Get_Gyro_Cal_Values+0x14c>
 8001070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <TT_Get_Gyro_Cal_Values+0x148>)
 8001076:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f000 fe21 	bl	8001cc4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <TT_Get_Gyro_Cal_Values+0x150>)
 8001088:	f001 f8ba 	bl	8002200 <HAL_GPIO_WritePin>

}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000098 	.word	0x20000098
 8001098:	200000f4 	.word	0x200000f4
 800109c:	200000a6 	.word	0x200000a6
 80010a0:	200000a8 	.word	0x200000a8
 80010a4:	200000aa 	.word	0x200000aa
 80010a8:	200000d0 	.word	0x200000d0
 80010ac:	200000d4 	.word	0x200000d4
 80010b0:	200000d8 	.word	0x200000d8
 80010b4:	457a0000 	.word	0x457a0000
 80010b8:	40020000 	.word	0x40020000
 80010bc:	00000000 	.word	0x00000000

080010c0 <TT_Get_All_Values>:

void TT_Get_All_Values(void){
 80010c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af04      	add	r7, sp, #16

	 if(HAL_GetTick()-Time>=20){
 80010c8:	f000 fdf0 	bl	8001cac <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4bc0      	ldr	r3, [pc, #768]	; (80013d0 <TT_Get_All_Values+0x310>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b13      	cmp	r3, #19
 80010d6:	f240 82a2 	bls.w	800161e <TT_Get_All_Values+0x55e>

		  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADRR,MPU6050_GYRO_MESURE,1,Gyro_Buffer, 6, 100000);
 80010da:	4bbe      	ldr	r3, [pc, #760]	; (80013d4 <TT_Get_All_Values+0x314>)
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4bbd      	ldr	r3, [pc, #756]	; (80013d8 <TT_Get_All_Values+0x318>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2243      	movs	r2, #67	; 0x43
 80010ea:	21d0      	movs	r1, #208	; 0xd0
 80010ec:	48bb      	ldr	r0, [pc, #748]	; (80013dc <TT_Get_All_Values+0x31c>)
 80010ee:	f001 fadf 	bl	80026b0 <HAL_I2C_Mem_Read>

		  Gyro_Raw_X=(Gyro_Buffer[0]<<8 | Gyro_Buffer[1]);
 80010f2:	4bb9      	ldr	r3, [pc, #740]	; (80013d8 <TT_Get_All_Values+0x318>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4bb7      	ldr	r3, [pc, #732]	; (80013d8 <TT_Get_All_Values+0x318>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21a      	sxth	r2, r3
 8001104:	4bb6      	ldr	r3, [pc, #728]	; (80013e0 <TT_Get_All_Values+0x320>)
 8001106:	801a      	strh	r2, [r3, #0]
		  Gyro_Raw_Y=(Gyro_Buffer[2]<<8 | Gyro_Buffer[3]);
 8001108:	4bb3      	ldr	r3, [pc, #716]	; (80013d8 <TT_Get_All_Values+0x318>)
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	4bb1      	ldr	r3, [pc, #708]	; (80013d8 <TT_Get_All_Values+0x318>)
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21a      	sxth	r2, r3
 800111a:	4bb2      	ldr	r3, [pc, #712]	; (80013e4 <TT_Get_All_Values+0x324>)
 800111c:	801a      	strh	r2, [r3, #0]
		  Gyro_Raw_Z=(Gyro_Buffer[4]<<8 | Gyro_Buffer[5]);
 800111e:	4bae      	ldr	r3, [pc, #696]	; (80013d8 <TT_Get_All_Values+0x318>)
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	4bac      	ldr	r3, [pc, #688]	; (80013d8 <TT_Get_All_Values+0x318>)
 8001128:	795b      	ldrb	r3, [r3, #5]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	4bad      	ldr	r3, [pc, #692]	; (80013e8 <TT_Get_All_Values+0x328>)
 8001132:	801a      	strh	r2, [r3, #0]

		 Gyro_Raw_X-=Gyro_Cal_X;
 8001134:	4baa      	ldr	r3, [pc, #680]	; (80013e0 <TT_Get_All_Values+0x320>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001142:	4baa      	ldr	r3, [pc, #680]	; (80013ec <TT_Get_All_Values+0x32c>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	b21a      	sxth	r2, r3
 8001156:	4ba2      	ldr	r3, [pc, #648]	; (80013e0 <TT_Get_All_Values+0x320>)
 8001158:	801a      	strh	r2, [r3, #0]
		 Gyro_Raw_Y-=Gyro_Cal_Y;
 800115a:	4ba2      	ldr	r3, [pc, #648]	; (80013e4 <TT_Get_All_Values+0x324>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001168:	4ba1      	ldr	r3, [pc, #644]	; (80013f0 <TT_Get_All_Values+0x330>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001176:	ee17 3a90 	vmov	r3, s15
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <TT_Get_All_Values+0x324>)
 800117e:	801a      	strh	r2, [r3, #0]
		 Gyro_Raw_Z-=Gyro_Cal_Z;
 8001180:	4b99      	ldr	r3, [pc, #612]	; (80013e8 <TT_Get_All_Values+0x328>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118e:	4b99      	ldr	r3, [pc, #612]	; (80013f4 <TT_Get_All_Values+0x334>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119c:	ee17 3a90 	vmov	r3, s15
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b91      	ldr	r3, [pc, #580]	; (80013e8 <TT_Get_All_Values+0x328>)
 80011a4:	801a      	strh	r2, [r3, #0]

		 Gyro_X=Gyro_Raw_X /65.5;
 80011a6:	4b8e      	ldr	r3, [pc, #568]	; (80013e0 <TT_Get_All_Values+0x320>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f97d 	bl	80004ac <__aeabi_i2d>
 80011b2:	a383      	add	r3, pc, #524	; (adr r3, 80013c0 <TT_Get_All_Values+0x300>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fb0c 	bl	80007d4 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fcb4 	bl	8000b30 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a8b      	ldr	r2, [pc, #556]	; (80013f8 <TT_Get_All_Values+0x338>)
 80011cc:	6013      	str	r3, [r2, #0]
		 Gyro_Y=Gyro_Raw_Y /65.5;
 80011ce:	4b85      	ldr	r3, [pc, #532]	; (80013e4 <TT_Get_All_Values+0x324>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f969 	bl	80004ac <__aeabi_i2d>
 80011da:	a379      	add	r3, pc, #484	; (adr r3, 80013c0 <TT_Get_All_Values+0x300>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff faf8 	bl	80007d4 <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fca0 	bl	8000b30 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a82      	ldr	r2, [pc, #520]	; (80013fc <TT_Get_All_Values+0x33c>)
 80011f4:	6013      	str	r3, [r2, #0]
		 Gyro_Z=Gyro_Raw_Z /65.5;
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <TT_Get_All_Values+0x328>)
 80011f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f955 	bl	80004ac <__aeabi_i2d>
 8001202:	a36f      	add	r3, pc, #444	; (adr r3, 80013c0 <TT_Get_All_Values+0x300>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fae4 	bl	80007d4 <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fc8c 	bl	8000b30 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a79      	ldr	r2, [pc, #484]	; (8001400 <TT_Get_All_Values+0x340>)
 800121c:	6013      	str	r3, [r2, #0]

		 HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADRR,MPU6050_ACCE_MESURE,1,Acce_Buffer, 6, 100000);
 800121e:	4b6d      	ldr	r3, [pc, #436]	; (80013d4 <TT_Get_All_Values+0x314>)
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2306      	movs	r3, #6
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	4b77      	ldr	r3, [pc, #476]	; (8001404 <TT_Get_All_Values+0x344>)
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	223b      	movs	r2, #59	; 0x3b
 800122e:	21d0      	movs	r1, #208	; 0xd0
 8001230:	486a      	ldr	r0, [pc, #424]	; (80013dc <TT_Get_All_Values+0x31c>)
 8001232:	f001 fa3d 	bl	80026b0 <HAL_I2C_Mem_Read>

		 	  Acce_Raw_X=(Acce_Buffer[0]<<8 | Acce_Buffer[1]);
 8001236:	4b73      	ldr	r3, [pc, #460]	; (8001404 <TT_Get_All_Values+0x344>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b71      	ldr	r3, [pc, #452]	; (8001404 <TT_Get_All_Values+0x344>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <TT_Get_All_Values+0x348>)
 800124a:	801a      	strh	r2, [r3, #0]
		 	  Acce_Raw_Y=(Acce_Buffer[2]<<8 | Acce_Buffer[3]);
 800124c:	4b6d      	ldr	r3, [pc, #436]	; (8001404 <TT_Get_All_Values+0x344>)
 800124e:	789b      	ldrb	r3, [r3, #2]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b6b      	ldr	r3, [pc, #428]	; (8001404 <TT_Get_All_Values+0x344>)
 8001256:	78db      	ldrb	r3, [r3, #3]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b6b      	ldr	r3, [pc, #428]	; (800140c <TT_Get_All_Values+0x34c>)
 8001260:	801a      	strh	r2, [r3, #0]
		 	  Acce_Raw_Z=(Acce_Buffer[4]<<8 | Acce_Buffer[5]);
 8001262:	4b68      	ldr	r3, [pc, #416]	; (8001404 <TT_Get_All_Values+0x344>)
 8001264:	791b      	ldrb	r3, [r3, #4]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b66      	ldr	r3, [pc, #408]	; (8001404 <TT_Get_All_Values+0x344>)
 800126c:	795b      	ldrb	r3, [r3, #5]
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <TT_Get_All_Values+0x350>)
 8001276:	801a      	strh	r2, [r3, #0]

		 	  Acce_X=(float)Acce_Raw_X/4096;
 8001278:	4b63      	ldr	r3, [pc, #396]	; (8001408 <TT_Get_All_Values+0x348>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001286:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001414 <TT_Get_All_Values+0x354>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	4b62      	ldr	r3, [pc, #392]	; (8001418 <TT_Get_All_Values+0x358>)
 8001290:	edc3 7a00 	vstr	s15, [r3]
		 	  Acce_Y=(float)Acce_Raw_Y/4096;
 8001294:	4b5d      	ldr	r3, [pc, #372]	; (800140c <TT_Get_All_Values+0x34c>)
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a2:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001414 <TT_Get_All_Values+0x354>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <TT_Get_All_Values+0x35c>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
		 	  Acce_Z=(float)Acce_Raw_Z/4096;
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <TT_Get_All_Values+0x350>)
 80012b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012be:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001414 <TT_Get_All_Values+0x354>
 80012c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c6:	4b56      	ldr	r3, [pc, #344]	; (8001420 <TT_Get_All_Values+0x360>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]

		 	  Angle_Pitch_Acce=(atan(Acce_Y / sqrt(Acce_X * Acce_X + Acce_Z * Acce_Z)) * 1 / (3.142 / 180)+1);
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <TT_Get_All_Values+0x35c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f8fd 	bl	80004d0 <__aeabi_f2d>
 80012d6:	4680      	mov	r8, r0
 80012d8:	4689      	mov	r9, r1
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <TT_Get_All_Values+0x358>)
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	4b4d      	ldr	r3, [pc, #308]	; (8001418 <TT_Get_All_Values+0x358>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <TT_Get_All_Values+0x360>)
 80012ec:	edd3 6a00 	vldr	s13, [r3]
 80012f0:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <TT_Get_All_Values+0x360>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f8e5 	bl	80004d0 <__aeabi_f2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	ec43 2b10 	vmov	d0, r2, r3
 800130e:	f003 fa83 	bl	8004818 <sqrt>
 8001312:	ec53 2b10 	vmov	r2, r3, d0
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7ff fa5b 	bl	80007d4 <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	ec43 2b17 	vmov	d7, r2, r3
 8001326:	eeb0 0a47 	vmov.f32	s0, s14
 800132a:	eef0 0a67 	vmov.f32	s1, s15
 800132e:	f003 f86f 	bl	8004410 <atan>
 8001332:	ec51 0b10 	vmov	r0, r1, d0
 8001336:	a324      	add	r3, pc, #144	; (adr r3, 80013c8 <TT_Get_All_Values+0x308>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff fa4a 	bl	80007d4 <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <TT_Get_All_Values+0x364>)
 800134e:	f7fe ff61 	bl	8000214 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fbe9 	bl	8000b30 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <TT_Get_All_Values+0x368>)
 8001362:	6013      	str	r3, [r2, #0]
		 	  Angle_Roll_Acce=(-atan(Acce_X/sqrt(Acce_Y*Acce_Y+Acce_Z*Acce_Z))*1/(3.142/180)-0.80);
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <TT_Get_All_Values+0x358>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8b1 	bl	80004d0 <__aeabi_f2d>
 800136e:	4680      	mov	r8, r0
 8001370:	4689      	mov	r9, r1
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <TT_Get_All_Values+0x35c>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <TT_Get_All_Values+0x35c>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <TT_Get_All_Values+0x360>)
 8001384:	edd3 6a00 	vldr	s13, [r3]
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <TT_Get_All_Values+0x360>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	ee17 0a90 	vmov	r0, s15
 800139a:	f7ff f899 	bl	80004d0 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	ec43 2b10 	vmov	d0, r2, r3
 80013a6:	f003 fa37 	bl	8004818 <sqrt>
 80013aa:	ec53 2b10 	vmov	r2, r3, d0
 80013ae:	4640      	mov	r0, r8
 80013b0:	4649      	mov	r1, r9
 80013b2:	f7ff fa0f 	bl	80007d4 <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	e037      	b.n	800142c <TT_Get_All_Values+0x36c>
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40506000 	.word	0x40506000
 80013c8:	80fa7e3f 	.word	0x80fa7e3f
 80013cc:	3f91dfde 	.word	0x3f91dfde
 80013d0:	200000f0 	.word	0x200000f0
 80013d4:	000186a0 	.word	0x000186a0
 80013d8:	20000090 	.word	0x20000090
 80013dc:	200000f4 	.word	0x200000f4
 80013e0:	200000ac 	.word	0x200000ac
 80013e4:	200000ae 	.word	0x200000ae
 80013e8:	200000b0 	.word	0x200000b0
 80013ec:	200000d0 	.word	0x200000d0
 80013f0:	200000d4 	.word	0x200000d4
 80013f4:	200000d8 	.word	0x200000d8
 80013f8:	200000b8 	.word	0x200000b8
 80013fc:	200000bc 	.word	0x200000bc
 8001400:	200000c0 	.word	0x200000c0
 8001404:	200000a0 	.word	0x200000a0
 8001408:	200000b2 	.word	0x200000b2
 800140c:	200000b4 	.word	0x200000b4
 8001410:	200000b6 	.word	0x200000b6
 8001414:	45800000 	.word	0x45800000
 8001418:	200000c4 	.word	0x200000c4
 800141c:	200000c8 	.word	0x200000c8
 8001420:	200000cc 	.word	0x200000cc
 8001424:	3ff00000 	.word	0x3ff00000
 8001428:	200000e0 	.word	0x200000e0
 800142c:	ec43 2b17 	vmov	d7, r2, r3
 8001430:	eeb0 0a47 	vmov.f32	s0, s14
 8001434:	eef0 0a67 	vmov.f32	s1, s15
 8001438:	f002 ffea 	bl	8004410 <atan>
 800143c:	ec53 2b10 	vmov	r2, r3, d0
 8001440:	4614      	mov	r4, r2
 8001442:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001446:	a389      	add	r3, pc, #548	; (adr r3, 800166c <TT_Get_All_Values+0x5ac>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7ff f9c0 	bl	80007d4 <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	a385      	add	r3, pc, #532	; (adr r3, 8001674 <TT_Get_All_Values+0x5b4>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7fe fed5 	bl	8000210 <__aeabi_dsub>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb5f 	bl	8000b30 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	4a70      	ldr	r2, [pc, #448]	; (8001638 <TT_Get_All_Values+0x578>)
 8001476:	6013      	str	r3, [r2, #0]

		 	  Filterd_Pitch =  (0.96f)*(Filterd_Pitch+Gyro_X*0.02f)+ (Angle_Pitch_Acce * 0.04f);
 8001478:	4b70      	ldr	r3, [pc, #448]	; (800163c <TT_Get_All_Values+0x57c>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001640 <TT_Get_All_Values+0x580>
 8001482:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001486:	4b6f      	ldr	r3, [pc, #444]	; (8001644 <TT_Get_All_Values+0x584>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001648 <TT_Get_All_Values+0x588>
 8001494:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001498:	4b6c      	ldr	r3, [pc, #432]	; (800164c <TT_Get_All_Values+0x58c>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001650 <TT_Get_All_Values+0x590>
 80014a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	4b66      	ldr	r3, [pc, #408]	; (8001644 <TT_Get_All_Values+0x584>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]
		 	  Filterd_Roll =  (0.96f) * (Filterd_Roll+Gyro_Y*0.02f ) + (Angle_Roll_Acce * 0.04f);
 80014b0:	4b68      	ldr	r3, [pc, #416]	; (8001654 <TT_Get_All_Values+0x594>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001640 <TT_Get_All_Values+0x580>
 80014ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014be:	4b66      	ldr	r3, [pc, #408]	; (8001658 <TT_Get_All_Values+0x598>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001648 <TT_Get_All_Values+0x588>
 80014cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <TT_Get_All_Values+0x578>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001650 <TT_Get_All_Values+0x590>
 80014da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <TT_Get_All_Values+0x598>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]

		 	  angle_yaw_gyro+=Gyro_Z*0.02f* 0.98039215686274;
 80014e8:	4b5c      	ldr	r3, [pc, #368]	; (800165c <TT_Get_All_Values+0x59c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ffef 	bl	80004d0 <__aeabi_f2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <TT_Get_All_Values+0x5a0>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001640 <TT_Get_All_Values+0x580>
 8001500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001504:	ee17 0a90 	vmov	r0, s15
 8001508:	f7fe ffe2 	bl	80004d0 <__aeabi_f2d>
 800150c:	a346      	add	r3, pc, #280	; (adr r3, 8001628 <TT_Get_All_Values+0x568>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f835 	bl	8000580 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fe79 	bl	8000214 <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb01 	bl	8000b30 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	4a4a      	ldr	r2, [pc, #296]	; (800165c <TT_Get_All_Values+0x59c>)
 8001532:	6013      	str	r3, [r2, #0]
		 	  Filterd_Pitch += Filterd_Roll * sin(Gyro_Raw_Z * 0.00000532924);
 8001534:	4b43      	ldr	r3, [pc, #268]	; (8001644 <TT_Get_All_Values+0x584>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ffc9 	bl	80004d0 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <TT_Get_All_Values+0x598>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ffc2 	bl	80004d0 <__aeabi_f2d>
 800154c:	4680      	mov	r8, r0
 800154e:	4689      	mov	r9, r1
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <TT_Get_All_Values+0x5a4>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffa8 	bl	80004ac <__aeabi_i2d>
 800155c:	a334      	add	r3, pc, #208	; (adr r3, 8001630 <TT_Get_All_Values+0x570>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f80d 	bl	8000580 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	ec43 2b17 	vmov	d7, r2, r3
 800156e:	eeb0 0a47 	vmov.f32	s0, s14
 8001572:	eef0 0a67 	vmov.f32	s1, s15
 8001576:	f003 f8f7 	bl	8004768 <sin>
 800157a:	ec53 2b10 	vmov	r2, r3, d0
 800157e:	4640      	mov	r0, r8
 8001580:	4649      	mov	r1, r9
 8001582:	f7fe fffd 	bl	8000580 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7fe fe41 	bl	8000214 <__adddf3>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fac9 	bl	8000b30 <__aeabi_d2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a28      	ldr	r2, [pc, #160]	; (8001644 <TT_Get_All_Values+0x584>)
 80015a2:	6013      	str	r3, [r2, #0]
		 	  Filterd_Roll -= Filterd_Pitch * sin(Gyro_Raw_Z * 0.00000532924);
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <TT_Get_All_Values+0x598>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff91 	bl	80004d0 <__aeabi_f2d>
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <TT_Get_All_Values+0x584>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff8a 	bl	80004d0 <__aeabi_f2d>
 80015bc:	4680      	mov	r8, r0
 80015be:	4689      	mov	r9, r1
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <TT_Get_All_Values+0x5a4>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff70 	bl	80004ac <__aeabi_i2d>
 80015cc:	a318      	add	r3, pc, #96	; (adr r3, 8001630 <TT_Get_All_Values+0x570>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe ffd5 	bl	8000580 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b17 	vmov	d7, r2, r3
 80015de:	eeb0 0a47 	vmov.f32	s0, s14
 80015e2:	eef0 0a67 	vmov.f32	s1, s15
 80015e6:	f003 f8bf 	bl	8004768 <sin>
 80015ea:	ec53 2b10 	vmov	r2, r3, d0
 80015ee:	4640      	mov	r0, r8
 80015f0:	4649      	mov	r1, r9
 80015f2:	f7fe ffc5 	bl	8000580 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe fe07 	bl	8000210 <__aeabi_dsub>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fa91 	bl	8000b30 <__aeabi_d2f>
 800160e:	4603      	mov	r3, r0
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <TT_Get_All_Values+0x598>)
 8001612:	6013      	str	r3, [r2, #0]
		 	  Time = HAL_GetTick();
 8001614:	f000 fb4a 	bl	8001cac <HAL_GetTick>
 8001618:	4603      	mov	r3, r0
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <TT_Get_All_Values+0x5a8>)
 800161c:	6013      	str	r3, [r2, #0]
	 }
	 }
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001626:	bf00      	nop
 8001628:	5f5f5f31 	.word	0x5f5f5f31
 800162c:	3fef5f5f 	.word	0x3fef5f5f
 8001630:	5638abf9 	.word	0x5638abf9
 8001634:	3ed65a3a 	.word	0x3ed65a3a
 8001638:	200000e4 	.word	0x200000e4
 800163c:	200000b8 	.word	0x200000b8
 8001640:	3ca3d70a 	.word	0x3ca3d70a
 8001644:	200000e8 	.word	0x200000e8
 8001648:	3f75c28f 	.word	0x3f75c28f
 800164c:	200000e0 	.word	0x200000e0
 8001650:	3d23d70a 	.word	0x3d23d70a
 8001654:	200000bc 	.word	0x200000bc
 8001658:	200000ec 	.word	0x200000ec
 800165c:	200000dc 	.word	0x200000dc
 8001660:	200000c0 	.word	0x200000c0
 8001664:	200000b0 	.word	0x200000b0
 8001668:	200000f0 	.word	0x200000f0
 800166c:	80fa7e3f 	.word	0x80fa7e3f
 8001670:	3f91dfde 	.word	0x3f91dfde
 8001674:	9999999a 	.word	0x9999999a
 8001678:	3fe99999 	.word	0x3fe99999

0800167c <TT_Get_Pitch_Angle>:
float TT_Get_Pitch_Angle(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

	TT_Get_All_Values();
 8001680:	f7ff fd1e 	bl	80010c0 <TT_Get_All_Values>
	return Filterd_Pitch;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <TT_Get_Pitch_Angle+0x18>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	ee07 3a90 	vmov	s15, r3
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000e8 	.word	0x200000e8

08001698 <TT_Get_Roll_Angle>:
float TT_Get_Roll_Angle(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

	TT_Get_All_Values();
 800169c:	f7ff fd10 	bl	80010c0 <TT_Get_All_Values>
	return Filterd_Roll;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <TT_Get_Roll_Angle+0x18>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	ee07 3a90 	vmov	s15, r3
}
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000ec 	.word	0x200000ec

080016b4 <TT_Get_Yaw_Angle>:
float TT_Get_Yaw_Angle(void){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

	TT_Get_All_Values();
 80016b8:	f7ff fd02 	bl	80010c0 <TT_Get_All_Values>
	return angle_yaw_gyro;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <TT_Get_Yaw_Angle+0x18>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	ee07 3a90 	vmov	s15, r3
}
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000dc 	.word	0x200000dc

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 fa84 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f826 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f000 f8ee 	bl	80018bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016e0:	f000 f8c2 	bl	8001868 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016e4:	f000 f892 	bl	800180c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  TT_Init_MPU6050();
 80016e8:	f7ff fbf4 	bl	8000ed4 <TT_Init_MPU6050>
  TT_Get_Gyro_Cal_Values();
 80016ec:	f7ff fc3c 	bl	8000f68 <TT_Get_Gyro_Cal_Values>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pitch=TT_Get_Pitch_Angle();
 80016f0:	f7ff ffc4 	bl	800167c <TT_Get_Pitch_Angle>
 80016f4:	eef0 7a40 	vmov.f32	s15, s0
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <main+0x4c>)
 80016fa:	edc3 7a00 	vstr	s15, [r3]
	  roll=TT_Get_Roll_Angle();
 80016fe:	f7ff ffcb 	bl	8001698 <TT_Get_Roll_Angle>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <main+0x50>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
	  yaw=TT_Get_Yaw_Angle();
 800170c:	f7ff ffd2 	bl	80016b4 <TT_Get_Yaw_Angle>
 8001710:	eef0 7a40 	vmov.f32	s15, s0
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <main+0x54>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
	  pitch=TT_Get_Pitch_Angle();
 800171a:	e7e9      	b.n	80016f0 <main+0x20>
 800171c:	2000018c 	.word	0x2000018c
 8001720:	20000190 	.word	0x20000190
 8001724:	20000194 	.word	0x20000194

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	2234      	movs	r2, #52	; 0x34
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fe60 	bl	80043fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <SystemClock_Config+0xdc>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <SystemClock_Config+0xdc>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <SystemClock_Config+0xdc>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001768:	2300      	movs	r3, #0
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <SystemClock_Config+0xe0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a25      	ldr	r2, [pc, #148]	; (8001808 <SystemClock_Config+0xe0>)
 8001772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <SystemClock_Config+0xe0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	2302      	movs	r3, #2
 8001786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178c:	2310      	movs	r3, #16
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001790:	2302      	movs	r3, #2
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001798:	2308      	movs	r3, #8
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800179c:	23b4      	movs	r3, #180	; 0xb4
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 f899 	bl	80038e8 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017bc:	f000 f8ec 	bl	8001998 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017c0:	f001 fcf8 	bl	80031b4 <HAL_PWREx_EnableOverDrive>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017ca:	f000 f8e5 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ce:	230f      	movs	r3, #15
 80017d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d2:	2302      	movs	r3, #2
 80017d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2105      	movs	r1, #5
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fd31 	bl	8003254 <HAL_RCC_ClockConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017f8:	f000 f8ce 	bl	8001998 <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3750      	adds	r7, #80	; 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_I2C1_Init+0x50>)
 8001812:	4a13      	ldr	r2, [pc, #76]	; (8001860 <MX_I2C1_Init+0x54>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_I2C1_Init+0x50>)
 8001818:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_I2C1_Init+0x58>)
 800181a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_I2C1_Init+0x50>)
 800182a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_I2C1_Init+0x50>)
 800184a:	f000 fcf3 	bl	8002234 <HAL_I2C_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001854:	f000 f8a0 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000f4 	.word	0x200000f4
 8001860:	40005400 	.word	0x40005400
 8001864:	00061a80 	.word	0x00061a80

08001868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART2_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f002 fac0 	bl	8003e24 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 f875 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000148 	.word	0x20000148
 80018b8:	40004400 	.word	0x40004400

080018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <MX_GPIO_Init+0xd0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a2c      	ldr	r2, [pc, #176]	; (800198c <MX_GPIO_Init+0xd0>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <MX_GPIO_Init+0xd0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <MX_GPIO_Init+0xd0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <MX_GPIO_Init+0xd0>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <MX_GPIO_Init+0xd0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_GPIO_Init+0xd0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <MX_GPIO_Init+0xd0>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_GPIO_Init+0xd0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_GPIO_Init+0xd0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <MX_GPIO_Init+0xd0>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_GPIO_Init+0xd0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2120      	movs	r1, #32
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <MX_GPIO_Init+0xd4>)
 8001948:	f000 fc5a 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800194c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001952:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_GPIO_Init+0xd8>)
 8001964:	f000 fab8 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001968:	2320      	movs	r3, #32
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_GPIO_Init+0xd4>)
 8001980:	f000 faaa 	bl	8001ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020800 	.word	0x40020800

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019e2:	2007      	movs	r0, #7
 80019e4:	f000 fa44 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_I2C_MspInit+0x84>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12b      	bne.n	8001a6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a36:	2312      	movs	r3, #18
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a42:	2304      	movs	r3, #4
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <HAL_I2C_MspInit+0x8c>)
 8001a4e:	f000 fa43 	bl	8001ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	; 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020400 	.word	0x40020400

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_UART_MspInit+0x84>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aee:	2307      	movs	r3, #7
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_UART_MspInit+0x8c>)
 8001afa:	f000 f9ed 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f890 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b92:	490e      	ldr	r1, [pc, #56]	; (8001bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ba8:	4c0b      	ldr	r4, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bb6:	f7ff ffd7 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f002 fbfb 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff fd87 	bl	80016d0 <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bd0:	08005c08 	.word	0x08005c08
  ldr r2, =_sbss
 8001bd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bd8:	2000019c 	.word	0x2000019c

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f931 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fec6 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f93b 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f911 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000198 	.word	0x20000198

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000198 	.word	0x20000198

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_Delay+0x44>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff47 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff5c 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffb0 	bl	8001e2c <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e165      	b.n	80021c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8154 	bne.w	80021ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d130      	bne.n	8001f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0201 	and.w	r2, r3, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d017      	beq.n	8001fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80ae 	beq.w	80021ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b5a      	ldr	r3, [pc, #360]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207a:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_GPIO_Init+0x304>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4f      	ldr	r2, [pc, #316]	; (80021e0 <HAL_GPIO_Init+0x308>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d025      	beq.n	80020f2 <HAL_GPIO_Init+0x21a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4e      	ldr	r2, [pc, #312]	; (80021e4 <HAL_GPIO_Init+0x30c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <HAL_GPIO_Init+0x216>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4d      	ldr	r2, [pc, #308]	; (80021e8 <HAL_GPIO_Init+0x310>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d019      	beq.n	80020ea <HAL_GPIO_Init+0x212>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4c      	ldr	r2, [pc, #304]	; (80021ec <HAL_GPIO_Init+0x314>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_GPIO_Init+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4b      	ldr	r2, [pc, #300]	; (80021f0 <HAL_GPIO_Init+0x318>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00d      	beq.n	80020e2 <HAL_GPIO_Init+0x20a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4a      	ldr	r2, [pc, #296]	; (80021f4 <HAL_GPIO_Init+0x31c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_Init+0x206>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a49      	ldr	r2, [pc, #292]	; (80021f8 <HAL_GPIO_Init+0x320>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <HAL_GPIO_Init+0x202>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020da:	2307      	movs	r3, #7
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	; (80021dc <HAL_GPIO_Init+0x304>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_GPIO_Init+0x324>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a31      	ldr	r2, [pc, #196]	; (80021fc <HAL_GPIO_Init+0x324>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x324>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x324>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_GPIO_Init+0x324>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218a:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_GPIO_Init+0x324>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_GPIO_Init+0x324>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_GPIO_Init+0x324>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae96 	bls.w	8001ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40021400 	.word	0x40021400
 80021f8:	40021800 	.word	0x40021800
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12b      	b.n	800249e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fbca 	bl	80019f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002298:	f001 f8ce 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a81      	ldr	r2, [pc, #516]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d807      	bhi.n	80022b8 <HAL_I2C_Init+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a80      	ldr	r2, [pc, #512]	; (80024ac <HAL_I2C_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e006      	b.n	80022c6 <HAL_I2C_Init+0x92>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <HAL_I2C_Init+0x27c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e7      	b.n	800249e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <HAL_I2C_Init+0x280>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d802      	bhi.n	8002308 <HAL_I2C_Init+0xd4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	e009      	b.n	800231c <HAL_I2C_Init+0xe8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_I2C_Init+0x284>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	495c      	ldr	r1, [pc, #368]	; (80024a8 <HAL_I2C_Init+0x274>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d819      	bhi.n	8002370 <HAL_I2C_Init+0x13c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_I2C_Init+0x138>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e59      	subs	r1, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	e051      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 800236c:	2304      	movs	r3, #4
 800236e:	e04f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_I2C_Init+0x168>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_I2C_Init+0x18e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x196>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e022      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_Init+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e58      	subs	r0, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000186a0 	.word	0x000186a0
 80024ac:	001e847f 	.word	0x001e847f
 80024b0:	003d08ff 	.word	0x003d08ff
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
 80024ce:	460b      	mov	r3, r1
 80024d0:	813b      	strh	r3, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d6:	f7ff fbe9 	bl	8001cac <HAL_GetTick>
 80024da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	f040 80d9 	bne.w	800269c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2319      	movs	r3, #25
 80024f0:	2201      	movs	r2, #1
 80024f2:	496d      	ldr	r1, [pc, #436]	; (80026a8 <HAL_I2C_Mem_Write+0x1ec>)
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fc7f 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
 8002502:	e0cc      	b.n	800269e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Mem_Write+0x56>
 800250e:	2302      	movs	r3, #2
 8002510:	e0c5      	b.n	800269e <HAL_I2C_Mem_Write+0x1e2>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d007      	beq.n	8002538 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2221      	movs	r2, #33	; 0x21
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a3a      	ldr	r2, [r7, #32]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a4d      	ldr	r2, [pc, #308]	; (80026ac <HAL_I2C_Mem_Write+0x1f0>)
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800257a:	88f8      	ldrh	r0, [r7, #6]
 800257c:	893a      	ldrh	r2, [r7, #8]
 800257e:	8979      	ldrh	r1, [r7, #10]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	4603      	mov	r3, r0
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fab6 	bl	8002afc <I2C_RequestMemoryWrite>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d052      	beq.n	800263c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e081      	b.n	800269e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fd00 	bl	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d107      	bne.n	80025c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06b      	b.n	800269e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_I2C_Mem_Write+0x180>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d017      	beq.n	800263c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1aa      	bne.n	800259a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fcec 	bl	8003026 <I2C_WaitOnBTFFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e016      	b.n	800269e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	00100002 	.word	0x00100002
 80026ac:	ffff0000 	.word	0xffff0000

080026b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ca:	f7ff faef 	bl	8001cac <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b20      	cmp	r3, #32
 80026da:	f040 8208 	bne.w	8002aee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2319      	movs	r3, #25
 80026e4:	2201      	movs	r2, #1
 80026e6:	497b      	ldr	r1, [pc, #492]	; (80028d4 <HAL_I2C_Mem_Read+0x224>)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fb85 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	e1fb      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Mem_Read+0x56>
 8002702:	2302      	movs	r3, #2
 8002704:	e1f4      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d007      	beq.n	800272c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800273a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2222      	movs	r2, #34	; 0x22
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2240      	movs	r2, #64	; 0x40
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a5b      	ldr	r2, [pc, #364]	; (80028d8 <HAL_I2C_Mem_Read+0x228>)
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800276e:	88f8      	ldrh	r0, [r7, #6]
 8002770:	893a      	ldrh	r2, [r7, #8]
 8002772:	8979      	ldrh	r1, [r7, #10]
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4603      	mov	r3, r0
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fa52 	bl	8002c28 <I2C_RequestMemoryRead>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1b0      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	2b00      	cmp	r3, #0
 8002794:	d113      	bne.n	80027be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	623b      	str	r3, [r7, #32]
 80027aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e184      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d11b      	bne.n	80027fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e164      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	2b02      	cmp	r3, #2
 8002804:	d11b      	bne.n	800283e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002814:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	e144      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002854:	e138      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b03      	cmp	r3, #3
 800285c:	f200 80f1 	bhi.w	8002a42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b01      	cmp	r3, #1
 8002866:	d123      	bne.n	80028b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fc1b 	bl	80030a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e139      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ae:	e10b      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d14e      	bne.n	8002956 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	2200      	movs	r2, #0
 80028c0:	4906      	ldr	r1, [pc, #24]	; (80028dc <HAL_I2C_Mem_Read+0x22c>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fa98 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e10e      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
 80028d2:	bf00      	nop
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000
 80028dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002954:	e0b8      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	2200      	movs	r2, #0
 800295e:	4966      	ldr	r1, [pc, #408]	; (8002af8 <HAL_I2C_Mem_Read+0x448>)
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fa49 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0bf      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	2200      	movs	r2, #0
 80029ba:	494f      	ldr	r1, [pc, #316]	; (8002af8 <HAL_I2C_Mem_Read+0x448>)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fa1b 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e091      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a40:	e042      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fb2e 	bl	80030a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e04c      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d118      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f aec2 	bne.w	8002856 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3728      	adds	r7, #40	; 0x28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00010004 	.word	0x00010004

08002afc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f960 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4c:	d103      	bne.n	8002b56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e05f      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	492d      	ldr	r1, [pc, #180]	; (8002c24 <I2C_RequestMemoryWrite+0x128>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f998 	bl	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e04c      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa02 	bl	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e02b      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e021      	b.n	8002c18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be4:	6a39      	ldr	r1, [r7, #32]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f9dc 	bl	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d107      	bne.n	8002c0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e005      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	00010002 	.word	0x00010002

08002c28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	813b      	strh	r3, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f8c2 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c88:	d103      	bne.n	8002c92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0aa      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	4952      	ldr	r1, [pc, #328]	; (8002df4 <I2C_RequestMemoryRead+0x1cc>)
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f8fa 	bl	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e097      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f964 	bl	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d107      	bne.n	8002cfa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e076      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d04:	893b      	ldrh	r3, [r7, #8]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]
 8002d0e:	e021      	b.n	8002d54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f93e 	bl	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d107      	bne.n	8002d46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e050      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4a:	893b      	ldrh	r3, [r7, #8]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	6a39      	ldr	r1, [r7, #32]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f923 	bl	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d107      	bne.n	8002d7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e035      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f82b 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	d103      	bne.n	8002dc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e013      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dc4:	897b      	ldrh	r3, [r7, #10]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	4906      	ldr	r1, [pc, #24]	; (8002df4 <I2C_RequestMemoryRead+0x1cc>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f863 	bl	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	00010002 	.word	0x00010002

08002df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	e025      	b.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d021      	beq.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe ff4b 	bl	8001cac <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e023      	b.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10d      	bne.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	e00c      	b.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d0b6      	beq.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb4:	e051      	b.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	d123      	bne.n	8002f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ede:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f043 0204 	orr.w	r2, r3, #4
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e046      	b.n	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d021      	beq.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7fe fec9 	bl	8001cac <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d116      	bne.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e020      	b.n	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10c      	bne.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e00b      	b.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d18d      	bne.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb0:	e02d      	b.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f8ce 	bl	8003154 <I2C_IsAcknowledgeFailed>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02d      	b.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d021      	beq.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fca:	f7fe fe6f 	bl	8001cac <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d116      	bne.n	800300e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e007      	b.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d1ca      	bne.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003032:	e02d      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f88d 	bl	8003154 <I2C_IsAcknowledgeFailed>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e02d      	b.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d021      	beq.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fe fe2e 	bl	8001cac <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b04      	cmp	r3, #4
 800309c:	d1ca      	bne.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030b4:	e042      	b.n	800313c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d119      	bne.n	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0210 	mvn.w	r2, #16
 80030cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e029      	b.n	800314c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f8:	f7fe fdd8 	bl	8001cac <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e007      	b.n	800314c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d1b5      	bne.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316a:	d11b      	bne.n	80031a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003174:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_PWREx_EnableOverDrive+0x90>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_PWREx_EnableOverDrive+0x90>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_PWREx_EnableOverDrive+0x90>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_PWREx_EnableOverDrive+0x94>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e0:	f7fe fd64 	bl	8001cac <HAL_GetTick>
 80031e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031e6:	e009      	b.n	80031fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031e8:	f7fe fd60 	bl	8001cac <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031f6:	d901      	bls.n	80031fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e01f      	b.n	800323c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <HAL_PWREx_EnableOverDrive+0x98>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d1ee      	bne.n	80031e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_PWREx_EnableOverDrive+0x9c>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003210:	f7fe fd4c 	bl	8001cac <HAL_GetTick>
 8003214:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003216:	e009      	b.n	800322c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003218:	f7fe fd48 	bl	8001cac <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003226:	d901      	bls.n	800322c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e007      	b.n	800323c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_PWREx_EnableOverDrive+0x98>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003238:	d1ee      	bne.n	8003218 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	420e0040 	.word	0x420e0040
 800324c:	40007000 	.word	0x40007000
 8003250:	420e0044 	.word	0x420e0044

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0cc      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d90c      	bls.n	8003290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d044      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d119      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d003      	beq.n	8003312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e067      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4934      	ldr	r1, [pc, #208]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fe fcb2 	bl	8001cac <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fe fcae 	bl	8001cac <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d20c      	bcs.n	800339c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033da:	f000 f855 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fc12 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800
 8003414:	080059c8 	.word	0x080059c8
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	080059d8 	.word	0x080059d8

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	080059d8 	.word	0x080059d8

08003488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b0ae      	sub	sp, #184	; 0xb8
 800348e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ae:	4bcb      	ldr	r3, [pc, #812]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	f200 8206 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x440>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	080038c9 	.word	0x080038c9
 80034cc:	080038c9 	.word	0x080038c9
 80034d0:	080038c9 	.word	0x080038c9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	080038c9 	.word	0x080038c9
 80034dc:	080038c9 	.word	0x080038c9
 80034e0:	080038c9 	.word	0x080038c9
 80034e4:	08003509 	.word	0x08003509
 80034e8:	080038c9 	.word	0x080038c9
 80034ec:	080038c9 	.word	0x080038c9
 80034f0:	080038c9 	.word	0x080038c9
 80034f4:	080036f9 	.word	0x080036f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4bb9      	ldr	r3, [pc, #740]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80034fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034fe:	e1e7      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4bb8      	ldr	r3, [pc, #736]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003506:	e1e3      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003508:	4bb4      	ldr	r3, [pc, #720]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003514:	4bb1      	ldr	r3, [pc, #708]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d071      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003520:	4bae      	ldr	r3, [pc, #696]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800352c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003546:	4622      	mov	r2, r4
 8003548:	462b      	mov	r3, r5
 800354a:	f04f 0000 	mov.w	r0, #0
 800354e:	f04f 0100 	mov.w	r1, #0
 8003552:	0159      	lsls	r1, r3, #5
 8003554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003558:	0150      	lsls	r0, r2, #5
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4621      	mov	r1, r4
 8003560:	1a51      	subs	r1, r2, r1
 8003562:	6439      	str	r1, [r7, #64]	; 0x40
 8003564:	4629      	mov	r1, r5
 8003566:	eb63 0301 	sbc.w	r3, r3, r1
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003578:	4649      	mov	r1, r9
 800357a:	018b      	lsls	r3, r1, #6
 800357c:	4641      	mov	r1, r8
 800357e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003582:	4641      	mov	r1, r8
 8003584:	018a      	lsls	r2, r1, #6
 8003586:	4641      	mov	r1, r8
 8003588:	1a51      	subs	r1, r2, r1
 800358a:	63b9      	str	r1, [r7, #56]	; 0x38
 800358c:	4649      	mov	r1, r9
 800358e:	eb63 0301 	sbc.w	r3, r3, r1
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80035a0:	4649      	mov	r1, r9
 80035a2:	00cb      	lsls	r3, r1, #3
 80035a4:	4641      	mov	r1, r8
 80035a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035aa:	4641      	mov	r1, r8
 80035ac:	00ca      	lsls	r2, r1, #3
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	4622      	mov	r2, r4
 80035b6:	189b      	adds	r3, r3, r2
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ba:	462b      	mov	r3, r5
 80035bc:	460a      	mov	r2, r1
 80035be:	eb42 0303 	adc.w	r3, r2, r3
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035d0:	4629      	mov	r1, r5
 80035d2:	024b      	lsls	r3, r1, #9
 80035d4:	4621      	mov	r1, r4
 80035d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035da:	4621      	mov	r1, r4
 80035dc:	024a      	lsls	r2, r1, #9
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035f4:	f7fd faec 	bl	8000bd0 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003602:	e067      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4b75      	ldr	r3, [pc, #468]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	2200      	movs	r2, #0
 800360c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003610:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361c:	67bb      	str	r3, [r7, #120]	; 0x78
 800361e:	2300      	movs	r3, #0
 8003620:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003622:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003626:	4622      	mov	r2, r4
 8003628:	462b      	mov	r3, r5
 800362a:	f04f 0000 	mov.w	r0, #0
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	0159      	lsls	r1, r3, #5
 8003634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003638:	0150      	lsls	r0, r2, #5
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4621      	mov	r1, r4
 8003640:	1a51      	subs	r1, r2, r1
 8003642:	62b9      	str	r1, [r7, #40]	; 0x28
 8003644:	4629      	mov	r1, r5
 8003646:	eb63 0301 	sbc.w	r3, r3, r1
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003658:	4649      	mov	r1, r9
 800365a:	018b      	lsls	r3, r1, #6
 800365c:	4641      	mov	r1, r8
 800365e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003662:	4641      	mov	r1, r8
 8003664:	018a      	lsls	r2, r1, #6
 8003666:	4641      	mov	r1, r8
 8003668:	ebb2 0a01 	subs.w	sl, r2, r1
 800366c:	4649      	mov	r1, r9
 800366e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800367e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003686:	4692      	mov	sl, r2
 8003688:	469b      	mov	fp, r3
 800368a:	4623      	mov	r3, r4
 800368c:	eb1a 0303 	adds.w	r3, sl, r3
 8003690:	623b      	str	r3, [r7, #32]
 8003692:	462b      	mov	r3, r5
 8003694:	eb4b 0303 	adc.w	r3, fp, r3
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036a6:	4629      	mov	r1, r5
 80036a8:	028b      	lsls	r3, r1, #10
 80036aa:	4621      	mov	r1, r4
 80036ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b0:	4621      	mov	r1, r4
 80036b2:	028a      	lsls	r2, r1, #10
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036bc:	2200      	movs	r2, #0
 80036be:	673b      	str	r3, [r7, #112]	; 0x70
 80036c0:	677a      	str	r2, [r7, #116]	; 0x74
 80036c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036c6:	f7fd fa83 	bl	8000bd0 <__aeabi_uldivmod>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4613      	mov	r3, r2
 80036d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d4:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	3301      	adds	r3, #1
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036f6:	e0eb      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f8:	4b38      	ldr	r3, [pc, #224]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003704:	4b35      	ldr	r3, [pc, #212]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d06b      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	2200      	movs	r2, #0
 8003718:	66bb      	str	r3, [r7, #104]	; 0x68
 800371a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800371c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	663b      	str	r3, [r7, #96]	; 0x60
 8003724:	2300      	movs	r3, #0
 8003726:	667b      	str	r3, [r7, #100]	; 0x64
 8003728:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800372c:	4622      	mov	r2, r4
 800372e:	462b      	mov	r3, r5
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	0159      	lsls	r1, r3, #5
 800373a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373e:	0150      	lsls	r0, r2, #5
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4621      	mov	r1, r4
 8003746:	1a51      	subs	r1, r2, r1
 8003748:	61b9      	str	r1, [r7, #24]
 800374a:	4629      	mov	r1, r5
 800374c:	eb63 0301 	sbc.w	r3, r3, r1
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800375e:	4659      	mov	r1, fp
 8003760:	018b      	lsls	r3, r1, #6
 8003762:	4651      	mov	r1, sl
 8003764:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003768:	4651      	mov	r1, sl
 800376a:	018a      	lsls	r2, r1, #6
 800376c:	4651      	mov	r1, sl
 800376e:	ebb2 0801 	subs.w	r8, r2, r1
 8003772:	4659      	mov	r1, fp
 8003774:	eb63 0901 	sbc.w	r9, r3, r1
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003788:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800378c:	4690      	mov	r8, r2
 800378e:	4699      	mov	r9, r3
 8003790:	4623      	mov	r3, r4
 8003792:	eb18 0303 	adds.w	r3, r8, r3
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	462b      	mov	r3, r5
 800379a:	eb49 0303 	adc.w	r3, r9, r3
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037ac:	4629      	mov	r1, r5
 80037ae:	024b      	lsls	r3, r1, #9
 80037b0:	4621      	mov	r1, r4
 80037b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037b6:	4621      	mov	r1, r4
 80037b8:	024a      	lsls	r2, r1, #9
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037c2:	2200      	movs	r2, #0
 80037c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80037c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037cc:	f7fd fa00 	bl	8000bd0 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4613      	mov	r3, r2
 80037d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037da:	e065      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x420>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e8:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	2200      	movs	r2, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	4611      	mov	r1, r2
 80037f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f8:	653b      	str	r3, [r7, #80]	; 0x50
 80037fa:	2300      	movs	r3, #0
 80037fc:	657b      	str	r3, [r7, #84]	; 0x54
 80037fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003802:	4642      	mov	r2, r8
 8003804:	464b      	mov	r3, r9
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	0159      	lsls	r1, r3, #5
 8003810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003814:	0150      	lsls	r0, r2, #5
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4641      	mov	r1, r8
 800381c:	1a51      	subs	r1, r2, r1
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	4649      	mov	r1, r9
 8003822:	eb63 0301 	sbc.w	r3, r3, r1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003834:	4659      	mov	r1, fp
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	4651      	mov	r1, sl
 800383a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383e:	4651      	mov	r1, sl
 8003840:	018a      	lsls	r2, r1, #6
 8003842:	4651      	mov	r1, sl
 8003844:	1a54      	subs	r4, r2, r1
 8003846:	4659      	mov	r1, fp
 8003848:	eb63 0501 	sbc.w	r5, r3, r1
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	00eb      	lsls	r3, r5, #3
 8003856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	4643      	mov	r3, r8
 8003862:	18e3      	adds	r3, r4, r3
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	464b      	mov	r3, r9
 8003868:	eb45 0303 	adc.w	r3, r5, r3
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387a:	4629      	mov	r1, r5
 800387c:	028b      	lsls	r3, r1, #10
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003884:	4621      	mov	r1, r4
 8003886:	028a      	lsls	r2, r1, #10
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003890:	2200      	movs	r2, #0
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
 8003894:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003896:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800389a:	f7fd f999 	bl	8000bd0 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4613      	mov	r3, r2
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0f1b      	lsrs	r3, r3, #28
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80038b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038c6:	e003      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	37b8      	adds	r7, #184	; 0xb8
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400

080038e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e28d      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8083 	beq.w	8003a0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003908:	4b94      	ldr	r3, [pc, #592]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b04      	cmp	r3, #4
 8003912:	d019      	beq.n	8003948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003914:	4b91      	ldr	r3, [pc, #580]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800391c:	2b08      	cmp	r3, #8
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003920:	4b8e      	ldr	r3, [pc, #568]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392c:	d00c      	beq.n	8003948 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b8b      	ldr	r3, [pc, #556]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d112      	bne.n	8003960 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003946:	d10b      	bne.n	8003960 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	4b84      	ldr	r3, [pc, #528]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d05b      	beq.n	8003a0c <HAL_RCC_OscConfig+0x124>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d157      	bne.n	8003a0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e25a      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	d106      	bne.n	8003978 <HAL_RCC_OscConfig+0x90>
 800396a:	4b7c      	ldr	r3, [pc, #496]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7b      	ldr	r2, [pc, #492]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e01d      	b.n	80039b4 <HAL_RCC_OscConfig+0xcc>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0xb4>
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b73      	ldr	r3, [pc, #460]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a72      	ldr	r2, [pc, #456]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0xcc>
 800399c:	4b6f      	ldr	r3, [pc, #444]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a6e      	ldr	r2, [pc, #440]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a6b      	ldr	r2, [pc, #428]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 80039ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d013      	beq.n	80039e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe f976 	bl	8001cac <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fe f972 	bl	8001cac <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e21f      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0xdc>
 80039e2:	e014      	b.n	8003a0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe f962 	bl	8001cac <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fe f95e 	bl	8001cac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e20b      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x104>
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d06f      	beq.n	8003afa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a1a:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a26:	4b4d      	ldr	r3, [pc, #308]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d105      	bne.n	8003a3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d11c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x186>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1d3      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4937      	ldr	r1, [pc, #220]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	e03a      	b.n	8003afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8c:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fe f90b 	bl	8001cac <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9a:	f7fe f907 	bl	8001cac <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1b4      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4925      	ldr	r1, [pc, #148]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]
 8003acc:	e015      	b.n	8003afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe f8ea 	bl	8001cac <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fe f8e6 	bl	8001cac <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e193      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d036      	beq.n	8003b74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x27c>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe f8ca 	bl	8001cac <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe f8c6 	bl	8001cac <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e173      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x234>
 8003b3a:	e01b      	b.n	8003b74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe f8b3 	bl	8001cac <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	e00e      	b.n	8003b68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4a:	f7fe f8af 	bl	8001cac <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d907      	bls.n	8003b68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e15c      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	42470000 	.word	0x42470000
 8003b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	4b8a      	ldr	r3, [pc, #552]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ea      	bne.n	8003b4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8097 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b86:	4b83      	ldr	r3, [pc, #524]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a7e      	ldr	r2, [pc, #504]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b7c      	ldr	r3, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCC_OscConfig+0x4b0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <HAL_RCC_OscConfig+0x4b0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a75      	ldr	r2, [pc, #468]	; (8003d98 <HAL_RCC_OscConfig+0x4b0>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fe f86f 	bl	8001cac <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fe f86b 	bl	8001cac <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e118      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <HAL_RCC_OscConfig+0x4b0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x31e>
 8003bf8:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a65      	ldr	r2, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	e01c      	b.n	8003c40 <HAL_RCC_OscConfig+0x358>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x340>
 8003c0e:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a60      	ldr	r2, [pc, #384]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1a:	4b5e      	ldr	r3, [pc, #376]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a5d      	ldr	r2, [pc, #372]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0x358>
 8003c28:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a59      	ldr	r2, [pc, #356]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fe f830 	bl	8001cac <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe f82c 	bl	8001cac <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0d7      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCC_OscConfig+0x368>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fe f81a 	bl	8001cac <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fe f816 	bl	8001cac <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0c1      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80ad 	beq.w	8003e14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cba:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d060      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d145      	bne.n	8003d5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b33      	ldr	r3, [pc, #204]	; (8003d9c <HAL_RCC_OscConfig+0x4b4>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd ffea 	bl	8001cac <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd ffe6 	bl	8001cac <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e093      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	071b      	lsls	r3, r3, #28
 8003d26:	491b      	ldr	r1, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x4b4>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fd ffbb 	bl	8001cac <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3a:	f7fd ffb7 	bl	8001cac <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e064      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x452>
 8003d58:	e05c      	b.n	8003e14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_RCC_OscConfig+0x4b4>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fd ffa4 	bl	8001cac <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fd ffa0 	bl	8001cac <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e04d      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x480>
 8003d86:	e045      	b.n	8003e14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e040      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_RCC_OscConfig+0x538>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d030      	beq.n	8003e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d129      	bne.n	8003e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d122      	bne.n	8003e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d119      	bne.n	8003e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	3b01      	subs	r3, #1
 8003dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d10f      	bne.n	8003e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e03f      	b.n	8003eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fe1a 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f829 	bl	8003ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec4:	b0c0      	sub	sp, #256	; 0x100
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	ea40 0301 	orr.w	r3, r0, r1
 8003ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f18:	f021 010c 	bic.w	r1, r1, #12
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f26:	430b      	orrs	r3, r1
 8003f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	6999      	ldr	r1, [r3, #24]
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	ea40 0301 	orr.w	r3, r0, r1
 8003f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b8f      	ldr	r3, [pc, #572]	; (800418c <UART_SetConfig+0x2cc>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d005      	beq.n	8003f60 <UART_SetConfig+0xa0>
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b8d      	ldr	r3, [pc, #564]	; (8004190 <UART_SetConfig+0x2d0>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7ff fa7e 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8003f64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f68:	e003      	b.n	8003f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6a:	f7ff fa65 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8003f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	f040 810c 	bne.w	8004198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	1891      	adds	r1, r2, r2
 8003f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	eb12 0801 	adds.w	r8, r2, r1
 8003fa8:	4629      	mov	r1, r5
 8003faa:	eb43 0901 	adc.w	r9, r3, r1
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc2:	4690      	mov	r8, r2
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	eb18 0303 	adds.w	r3, r8, r3
 8003fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	eb49 0303 	adc.w	r3, r9, r3
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fee:	460b      	mov	r3, r1
 8003ff0:	18db      	adds	r3, r3, r3
 8003ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	eb42 0303 	adc.w	r3, r2, r3
 8003ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004004:	f7fc fde4 	bl	8000bd0 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b61      	ldr	r3, [pc, #388]	; (8004194 <UART_SetConfig+0x2d4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011c      	lsls	r4, r3, #4
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004020:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004030:	415b      	adcs	r3, r3
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004038:	4641      	mov	r1, r8
 800403a:	eb12 0a01 	adds.w	sl, r2, r1
 800403e:	4649      	mov	r1, r9
 8004040:	eb43 0b01 	adc.w	fp, r3, r1
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004058:	4692      	mov	sl, r2
 800405a:	469b      	mov	fp, r3
 800405c:	4643      	mov	r3, r8
 800405e:	eb1a 0303 	adds.w	r3, sl, r3
 8004062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004066:	464b      	mov	r3, r9
 8004068:	eb4b 0303 	adc.w	r3, fp, r3
 800406c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800407c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004084:	460b      	mov	r3, r1
 8004086:	18db      	adds	r3, r3, r3
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
 800408a:	4613      	mov	r3, r2
 800408c:	eb42 0303 	adc.w	r3, r2, r3
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800409a:	f7fc fd99 	bl	8000bd0 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <UART_SetConfig+0x2d4>)
 80040a6:	fba3 2301 	umull	r2, r3, r3, r1
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2264      	movs	r2, #100	; 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <UART_SetConfig+0x2d4>)
 80040bc:	fba3 2302 	umull	r2, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c8:	441c      	add	r4, r3
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040e4:	415b      	adcs	r3, r3
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6339      	str	r1, [r7, #48]	; 0x30
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004120:	464b      	mov	r3, r9
 8004122:	460a      	mov	r2, r1
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004138:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800413c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004140:	460b      	mov	r3, r1
 8004142:	18db      	adds	r3, r3, r3
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	4613      	mov	r3, r2
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004156:	f7fc fd3b 	bl	8000bd0 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <UART_SetConfig+0x2d4>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	; 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <UART_SetConfig+0x2d4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 0207 	and.w	r2, r3, #7
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4422      	add	r2, r4
 8004186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004188:	e105      	b.n	8004396 <UART_SetConfig+0x4d6>
 800418a:	bf00      	nop
 800418c:	40011000 	.word	0x40011000
 8004190:	40011400 	.word	0x40011400
 8004194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041aa:	4642      	mov	r2, r8
 80041ac:	464b      	mov	r3, r9
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	6239      	str	r1, [r7, #32]
 80041b2:	415b      	adcs	r3, r3
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ba:	4641      	mov	r1, r8
 80041bc:	1854      	adds	r4, r2, r1
 80041be:	4649      	mov	r1, r9
 80041c0:	eb43 0501 	adc.w	r5, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	00eb      	lsls	r3, r5, #3
 80041ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d2:	00e2      	lsls	r2, r4, #3
 80041d4:	4614      	mov	r4, r2
 80041d6:	461d      	mov	r5, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	18e3      	adds	r3, r4, r3
 80041dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e0:	464b      	mov	r3, r9
 80041e2:	eb45 0303 	adc.w	r3, r5, r3
 80041e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004206:	4629      	mov	r1, r5
 8004208:	008b      	lsls	r3, r1, #2
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004210:	4621      	mov	r1, r4
 8004212:	008a      	lsls	r2, r1, #2
 8004214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004218:	f7fc fcda 	bl	8000bd0 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <UART_SetConfig+0x4e4>)
 8004222:	fba3 2302 	umull	r2, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	011c      	lsls	r4, r3, #4
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	61b9      	str	r1, [r7, #24]
 8004244:	415b      	adcs	r3, r3
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6139      	str	r1, [r7, #16]
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004280:	464b      	mov	r3, r9
 8004282:	460a      	mov	r2, r1
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	67bb      	str	r3, [r7, #120]	; 0x78
 8004296:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042a4:	4649      	mov	r1, r9
 80042a6:	008b      	lsls	r3, r1, #2
 80042a8:	4641      	mov	r1, r8
 80042aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ae:	4641      	mov	r1, r8
 80042b0:	008a      	lsls	r2, r1, #2
 80042b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042b6:	f7fc fc8b 	bl	8000bd0 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <UART_SetConfig+0x4e4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <UART_SetConfig+0x4e4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042de:	441c      	add	r4, r3
 80042e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e4:	2200      	movs	r2, #0
 80042e6:	673b      	str	r3, [r7, #112]	; 0x70
 80042e8:	677a      	str	r2, [r7, #116]	; 0x74
 80042ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	415b      	adcs	r3, r3
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042fe:	4641      	mov	r1, r8
 8004300:	1851      	adds	r1, r2, r1
 8004302:	6039      	str	r1, [r7, #0]
 8004304:	4649      	mov	r1, r9
 8004306:	414b      	adcs	r3, r1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004316:	4659      	mov	r1, fp
 8004318:	00cb      	lsls	r3, r1, #3
 800431a:	4651      	mov	r1, sl
 800431c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004320:	4651      	mov	r1, sl
 8004322:	00ca      	lsls	r2, r1, #3
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	4603      	mov	r3, r0
 800432a:	4642      	mov	r2, r8
 800432c:	189b      	adds	r3, r3, r2
 800432e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004330:	464b      	mov	r3, r9
 8004332:	460a      	mov	r2, r1
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	663b      	str	r3, [r7, #96]	; 0x60
 8004344:	667a      	str	r2, [r7, #100]	; 0x64
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004352:	4649      	mov	r1, r9
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4641      	mov	r1, r8
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4641      	mov	r1, r8
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004364:	f7fc fc34 	bl	8000bd0 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <UART_SetConfig+0x4e4>)
 800436e:	fba3 1302 	umull	r1, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2164      	movs	r1, #100	; 0x64
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <UART_SetConfig+0x4e4>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4422      	add	r2, r4
 8004394:	609a      	str	r2, [r3, #8]
}
 8004396:	bf00      	nop
 8004398:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	51eb851f 	.word	0x51eb851f

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f001 faf0 	bl	80059ac <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08005c00 	.word	0x08005c00
 80043f0:	08005c00 	.word	0x08005c00
 80043f4:	08005c00 	.word	0x08005c00
 80043f8:	08005c04 	.word	0x08005c04

080043fc <memset>:
 80043fc:	4402      	add	r2, r0
 80043fe:	4603      	mov	r3, r0
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	f803 1b01 	strb.w	r1, [r3], #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>
 800440c:	0000      	movs	r0, r0
	...

08004410 <atan>:
 8004410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	ec55 4b10 	vmov	r4, r5, d0
 8004418:	4bc3      	ldr	r3, [pc, #780]	; (8004728 <atan+0x318>)
 800441a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800441e:	429e      	cmp	r6, r3
 8004420:	46ab      	mov	fp, r5
 8004422:	dd18      	ble.n	8004456 <atan+0x46>
 8004424:	4bc1      	ldr	r3, [pc, #772]	; (800472c <atan+0x31c>)
 8004426:	429e      	cmp	r6, r3
 8004428:	dc01      	bgt.n	800442e <atan+0x1e>
 800442a:	d109      	bne.n	8004440 <atan+0x30>
 800442c:	b144      	cbz	r4, 8004440 <atan+0x30>
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	4620      	mov	r0, r4
 8004434:	4629      	mov	r1, r5
 8004436:	f7fb feed 	bl	8000214 <__adddf3>
 800443a:	4604      	mov	r4, r0
 800443c:	460d      	mov	r5, r1
 800443e:	e006      	b.n	800444e <atan+0x3e>
 8004440:	f1bb 0f00 	cmp.w	fp, #0
 8004444:	f300 8131 	bgt.w	80046aa <atan+0x29a>
 8004448:	a59b      	add	r5, pc, #620	; (adr r5, 80046b8 <atan+0x2a8>)
 800444a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800444e:	ec45 4b10 	vmov	d0, r4, r5
 8004452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004456:	4bb6      	ldr	r3, [pc, #728]	; (8004730 <atan+0x320>)
 8004458:	429e      	cmp	r6, r3
 800445a:	dc14      	bgt.n	8004486 <atan+0x76>
 800445c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004460:	429e      	cmp	r6, r3
 8004462:	dc0d      	bgt.n	8004480 <atan+0x70>
 8004464:	a396      	add	r3, pc, #600	; (adr r3, 80046c0 <atan+0x2b0>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	ee10 0a10 	vmov	r0, s0
 800446e:	4629      	mov	r1, r5
 8004470:	f7fb fed0 	bl	8000214 <__adddf3>
 8004474:	4baf      	ldr	r3, [pc, #700]	; (8004734 <atan+0x324>)
 8004476:	2200      	movs	r2, #0
 8004478:	f7fc fb12 	bl	8000aa0 <__aeabi_dcmpgt>
 800447c:	2800      	cmp	r0, #0
 800447e:	d1e6      	bne.n	800444e <atan+0x3e>
 8004480:	f04f 3aff 	mov.w	sl, #4294967295
 8004484:	e02b      	b.n	80044de <atan+0xce>
 8004486:	f000 f963 	bl	8004750 <fabs>
 800448a:	4bab      	ldr	r3, [pc, #684]	; (8004738 <atan+0x328>)
 800448c:	429e      	cmp	r6, r3
 800448e:	ec55 4b10 	vmov	r4, r5, d0
 8004492:	f300 80bf 	bgt.w	8004614 <atan+0x204>
 8004496:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800449a:	429e      	cmp	r6, r3
 800449c:	f300 80a0 	bgt.w	80045e0 <atan+0x1d0>
 80044a0:	ee10 2a10 	vmov	r2, s0
 80044a4:	ee10 0a10 	vmov	r0, s0
 80044a8:	462b      	mov	r3, r5
 80044aa:	4629      	mov	r1, r5
 80044ac:	f7fb feb2 	bl	8000214 <__adddf3>
 80044b0:	4ba0      	ldr	r3, [pc, #640]	; (8004734 <atan+0x324>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	f7fb feac 	bl	8000210 <__aeabi_dsub>
 80044b8:	2200      	movs	r2, #0
 80044ba:	4606      	mov	r6, r0
 80044bc:	460f      	mov	r7, r1
 80044be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c2:	4620      	mov	r0, r4
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fb fea5 	bl	8000214 <__adddf3>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4630      	mov	r0, r6
 80044d0:	4639      	mov	r1, r7
 80044d2:	f7fc f97f 	bl	80007d4 <__aeabi_ddiv>
 80044d6:	f04f 0a00 	mov.w	sl, #0
 80044da:	4604      	mov	r4, r0
 80044dc:	460d      	mov	r5, r1
 80044de:	4622      	mov	r2, r4
 80044e0:	462b      	mov	r3, r5
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fc f84b 	bl	8000580 <__aeabi_dmul>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4680      	mov	r8, r0
 80044f0:	4689      	mov	r9, r1
 80044f2:	f7fc f845 	bl	8000580 <__aeabi_dmul>
 80044f6:	a374      	add	r3, pc, #464	; (adr r3, 80046c8 <atan+0x2b8>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	4606      	mov	r6, r0
 80044fe:	460f      	mov	r7, r1
 8004500:	f7fc f83e 	bl	8000580 <__aeabi_dmul>
 8004504:	a372      	add	r3, pc, #456	; (adr r3, 80046d0 <atan+0x2c0>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f7fb fe83 	bl	8000214 <__adddf3>
 800450e:	4632      	mov	r2, r6
 8004510:	463b      	mov	r3, r7
 8004512:	f7fc f835 	bl	8000580 <__aeabi_dmul>
 8004516:	a370      	add	r3, pc, #448	; (adr r3, 80046d8 <atan+0x2c8>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f7fb fe7a 	bl	8000214 <__adddf3>
 8004520:	4632      	mov	r2, r6
 8004522:	463b      	mov	r3, r7
 8004524:	f7fc f82c 	bl	8000580 <__aeabi_dmul>
 8004528:	a36d      	add	r3, pc, #436	; (adr r3, 80046e0 <atan+0x2d0>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fb fe71 	bl	8000214 <__adddf3>
 8004532:	4632      	mov	r2, r6
 8004534:	463b      	mov	r3, r7
 8004536:	f7fc f823 	bl	8000580 <__aeabi_dmul>
 800453a:	a36b      	add	r3, pc, #428	; (adr r3, 80046e8 <atan+0x2d8>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f7fb fe68 	bl	8000214 <__adddf3>
 8004544:	4632      	mov	r2, r6
 8004546:	463b      	mov	r3, r7
 8004548:	f7fc f81a 	bl	8000580 <__aeabi_dmul>
 800454c:	a368      	add	r3, pc, #416	; (adr r3, 80046f0 <atan+0x2e0>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fb fe5f 	bl	8000214 <__adddf3>
 8004556:	4642      	mov	r2, r8
 8004558:	464b      	mov	r3, r9
 800455a:	f7fc f811 	bl	8000580 <__aeabi_dmul>
 800455e:	a366      	add	r3, pc, #408	; (adr r3, 80046f8 <atan+0x2e8>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	4680      	mov	r8, r0
 8004566:	4689      	mov	r9, r1
 8004568:	4630      	mov	r0, r6
 800456a:	4639      	mov	r1, r7
 800456c:	f7fc f808 	bl	8000580 <__aeabi_dmul>
 8004570:	a363      	add	r3, pc, #396	; (adr r3, 8004700 <atan+0x2f0>)
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f7fb fe4b 	bl	8000210 <__aeabi_dsub>
 800457a:	4632      	mov	r2, r6
 800457c:	463b      	mov	r3, r7
 800457e:	f7fb ffff 	bl	8000580 <__aeabi_dmul>
 8004582:	a361      	add	r3, pc, #388	; (adr r3, 8004708 <atan+0x2f8>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f7fb fe42 	bl	8000210 <__aeabi_dsub>
 800458c:	4632      	mov	r2, r6
 800458e:	463b      	mov	r3, r7
 8004590:	f7fb fff6 	bl	8000580 <__aeabi_dmul>
 8004594:	a35e      	add	r3, pc, #376	; (adr r3, 8004710 <atan+0x300>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f7fb fe39 	bl	8000210 <__aeabi_dsub>
 800459e:	4632      	mov	r2, r6
 80045a0:	463b      	mov	r3, r7
 80045a2:	f7fb ffed 	bl	8000580 <__aeabi_dmul>
 80045a6:	a35c      	add	r3, pc, #368	; (adr r3, 8004718 <atan+0x308>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f7fb fe30 	bl	8000210 <__aeabi_dsub>
 80045b0:	4632      	mov	r2, r6
 80045b2:	463b      	mov	r3, r7
 80045b4:	f7fb ffe4 	bl	8000580 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4640      	mov	r0, r8
 80045be:	4649      	mov	r1, r9
 80045c0:	f7fb fe28 	bl	8000214 <__adddf3>
 80045c4:	4622      	mov	r2, r4
 80045c6:	462b      	mov	r3, r5
 80045c8:	f7fb ffda 	bl	8000580 <__aeabi_dmul>
 80045cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	d14b      	bne.n	800466e <atan+0x25e>
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb fe19 	bl	8000210 <__aeabi_dsub>
 80045de:	e72c      	b.n	800443a <atan+0x2a>
 80045e0:	ee10 0a10 	vmov	r0, s0
 80045e4:	4b53      	ldr	r3, [pc, #332]	; (8004734 <atan+0x324>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fb fe11 	bl	8000210 <__aeabi_dsub>
 80045ee:	4b51      	ldr	r3, [pc, #324]	; (8004734 <atan+0x324>)
 80045f0:	4606      	mov	r6, r0
 80045f2:	460f      	mov	r7, r1
 80045f4:	2200      	movs	r2, #0
 80045f6:	4620      	mov	r0, r4
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7fb fe0b 	bl	8000214 <__adddf3>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4630      	mov	r0, r6
 8004604:	4639      	mov	r1, r7
 8004606:	f7fc f8e5 	bl	80007d4 <__aeabi_ddiv>
 800460a:	f04f 0a01 	mov.w	sl, #1
 800460e:	4604      	mov	r4, r0
 8004610:	460d      	mov	r5, r1
 8004612:	e764      	b.n	80044de <atan+0xce>
 8004614:	4b49      	ldr	r3, [pc, #292]	; (800473c <atan+0x32c>)
 8004616:	429e      	cmp	r6, r3
 8004618:	da1d      	bge.n	8004656 <atan+0x246>
 800461a:	ee10 0a10 	vmov	r0, s0
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <atan+0x330>)
 8004620:	2200      	movs	r2, #0
 8004622:	4629      	mov	r1, r5
 8004624:	f7fb fdf4 	bl	8000210 <__aeabi_dsub>
 8004628:	4b45      	ldr	r3, [pc, #276]	; (8004740 <atan+0x330>)
 800462a:	4606      	mov	r6, r0
 800462c:	460f      	mov	r7, r1
 800462e:	2200      	movs	r2, #0
 8004630:	4620      	mov	r0, r4
 8004632:	4629      	mov	r1, r5
 8004634:	f7fb ffa4 	bl	8000580 <__aeabi_dmul>
 8004638:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <atan+0x324>)
 800463a:	2200      	movs	r2, #0
 800463c:	f7fb fdea 	bl	8000214 <__adddf3>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4630      	mov	r0, r6
 8004646:	4639      	mov	r1, r7
 8004648:	f7fc f8c4 	bl	80007d4 <__aeabi_ddiv>
 800464c:	f04f 0a02 	mov.w	sl, #2
 8004650:	4604      	mov	r4, r0
 8004652:	460d      	mov	r5, r1
 8004654:	e743      	b.n	80044de <atan+0xce>
 8004656:	462b      	mov	r3, r5
 8004658:	ee10 2a10 	vmov	r2, s0
 800465c:	4939      	ldr	r1, [pc, #228]	; (8004744 <atan+0x334>)
 800465e:	2000      	movs	r0, #0
 8004660:	f7fc f8b8 	bl	80007d4 <__aeabi_ddiv>
 8004664:	f04f 0a03 	mov.w	sl, #3
 8004668:	4604      	mov	r4, r0
 800466a:	460d      	mov	r5, r1
 800466c:	e737      	b.n	80044de <atan+0xce>
 800466e:	4b36      	ldr	r3, [pc, #216]	; (8004748 <atan+0x338>)
 8004670:	4e36      	ldr	r6, [pc, #216]	; (800474c <atan+0x33c>)
 8004672:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004676:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800467a:	e9da 2300 	ldrd	r2, r3, [sl]
 800467e:	f7fb fdc7 	bl	8000210 <__aeabi_dsub>
 8004682:	4622      	mov	r2, r4
 8004684:	462b      	mov	r3, r5
 8004686:	f7fb fdc3 	bl	8000210 <__aeabi_dsub>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004692:	f7fb fdbd 	bl	8000210 <__aeabi_dsub>
 8004696:	f1bb 0f00 	cmp.w	fp, #0
 800469a:	4604      	mov	r4, r0
 800469c:	460d      	mov	r5, r1
 800469e:	f6bf aed6 	bge.w	800444e <atan+0x3e>
 80046a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046a6:	461d      	mov	r5, r3
 80046a8:	e6d1      	b.n	800444e <atan+0x3e>
 80046aa:	a51d      	add	r5, pc, #116	; (adr r5, 8004720 <atan+0x310>)
 80046ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80046b0:	e6cd      	b.n	800444e <atan+0x3e>
 80046b2:	bf00      	nop
 80046b4:	f3af 8000 	nop.w
 80046b8:	54442d18 	.word	0x54442d18
 80046bc:	bff921fb 	.word	0xbff921fb
 80046c0:	8800759c 	.word	0x8800759c
 80046c4:	7e37e43c 	.word	0x7e37e43c
 80046c8:	e322da11 	.word	0xe322da11
 80046cc:	3f90ad3a 	.word	0x3f90ad3a
 80046d0:	24760deb 	.word	0x24760deb
 80046d4:	3fa97b4b 	.word	0x3fa97b4b
 80046d8:	a0d03d51 	.word	0xa0d03d51
 80046dc:	3fb10d66 	.word	0x3fb10d66
 80046e0:	c54c206e 	.word	0xc54c206e
 80046e4:	3fb745cd 	.word	0x3fb745cd
 80046e8:	920083ff 	.word	0x920083ff
 80046ec:	3fc24924 	.word	0x3fc24924
 80046f0:	5555550d 	.word	0x5555550d
 80046f4:	3fd55555 	.word	0x3fd55555
 80046f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80046fc:	bfa2b444 	.word	0xbfa2b444
 8004700:	52defd9a 	.word	0x52defd9a
 8004704:	3fadde2d 	.word	0x3fadde2d
 8004708:	af749a6d 	.word	0xaf749a6d
 800470c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004710:	fe231671 	.word	0xfe231671
 8004714:	3fbc71c6 	.word	0x3fbc71c6
 8004718:	9998ebc4 	.word	0x9998ebc4
 800471c:	3fc99999 	.word	0x3fc99999
 8004720:	54442d18 	.word	0x54442d18
 8004724:	3ff921fb 	.word	0x3ff921fb
 8004728:	440fffff 	.word	0x440fffff
 800472c:	7ff00000 	.word	0x7ff00000
 8004730:	3fdbffff 	.word	0x3fdbffff
 8004734:	3ff00000 	.word	0x3ff00000
 8004738:	3ff2ffff 	.word	0x3ff2ffff
 800473c:	40038000 	.word	0x40038000
 8004740:	3ff80000 	.word	0x3ff80000
 8004744:	bff00000 	.word	0xbff00000
 8004748:	08005a00 	.word	0x08005a00
 800474c:	080059e0 	.word	0x080059e0

08004750 <fabs>:
 8004750:	ec51 0b10 	vmov	r0, r1, d0
 8004754:	ee10 2a10 	vmov	r2, s0
 8004758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800475c:	ec43 2b10 	vmov	d0, r2, r3
 8004760:	4770      	bx	lr
 8004762:	0000      	movs	r0, r0
 8004764:	0000      	movs	r0, r0
	...

08004768 <sin>:
 8004768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800476a:	ec53 2b10 	vmov	r2, r3, d0
 800476e:	4828      	ldr	r0, [pc, #160]	; (8004810 <sin+0xa8>)
 8004770:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004774:	4281      	cmp	r1, r0
 8004776:	dc07      	bgt.n	8004788 <sin+0x20>
 8004778:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004808 <sin+0xa0>
 800477c:	2000      	movs	r0, #0
 800477e:	b005      	add	sp, #20
 8004780:	f85d eb04 	ldr.w	lr, [sp], #4
 8004784:	f000 bf4c 	b.w	8005620 <__kernel_sin>
 8004788:	4822      	ldr	r0, [pc, #136]	; (8004814 <sin+0xac>)
 800478a:	4281      	cmp	r1, r0
 800478c:	dd09      	ble.n	80047a2 <sin+0x3a>
 800478e:	ee10 0a10 	vmov	r0, s0
 8004792:	4619      	mov	r1, r3
 8004794:	f7fb fd3c 	bl	8000210 <__aeabi_dsub>
 8004798:	ec41 0b10 	vmov	d0, r0, r1
 800479c:	b005      	add	sp, #20
 800479e:	f85d fb04 	ldr.w	pc, [sp], #4
 80047a2:	4668      	mov	r0, sp
 80047a4:	f000 f864 	bl	8004870 <__ieee754_rem_pio2>
 80047a8:	f000 0003 	and.w	r0, r0, #3
 80047ac:	2801      	cmp	r0, #1
 80047ae:	d00c      	beq.n	80047ca <sin+0x62>
 80047b0:	2802      	cmp	r0, #2
 80047b2:	d011      	beq.n	80047d8 <sin+0x70>
 80047b4:	b9f0      	cbnz	r0, 80047f4 <sin+0x8c>
 80047b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047ba:	ed9d 0b00 	vldr	d0, [sp]
 80047be:	2001      	movs	r0, #1
 80047c0:	f000 ff2e 	bl	8005620 <__kernel_sin>
 80047c4:	ec51 0b10 	vmov	r0, r1, d0
 80047c8:	e7e6      	b.n	8004798 <sin+0x30>
 80047ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047ce:	ed9d 0b00 	vldr	d0, [sp]
 80047d2:	f000 fb0d 	bl	8004df0 <__kernel_cos>
 80047d6:	e7f5      	b.n	80047c4 <sin+0x5c>
 80047d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047dc:	ed9d 0b00 	vldr	d0, [sp]
 80047e0:	2001      	movs	r0, #1
 80047e2:	f000 ff1d 	bl	8005620 <__kernel_sin>
 80047e6:	ec53 2b10 	vmov	r2, r3, d0
 80047ea:	ee10 0a10 	vmov	r0, s0
 80047ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80047f2:	e7d1      	b.n	8004798 <sin+0x30>
 80047f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047f8:	ed9d 0b00 	vldr	d0, [sp]
 80047fc:	f000 faf8 	bl	8004df0 <__kernel_cos>
 8004800:	e7f1      	b.n	80047e6 <sin+0x7e>
 8004802:	bf00      	nop
 8004804:	f3af 8000 	nop.w
	...
 8004810:	3fe921fb 	.word	0x3fe921fb
 8004814:	7fefffff 	.word	0x7fefffff

08004818 <sqrt>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	ed2d 8b02 	vpush	{d8}
 800481e:	ec55 4b10 	vmov	r4, r5, d0
 8004822:	f000 fa31 	bl	8004c88 <__ieee754_sqrt>
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	4620      	mov	r0, r4
 800482c:	4629      	mov	r1, r5
 800482e:	eeb0 8a40 	vmov.f32	s16, s0
 8004832:	eef0 8a60 	vmov.f32	s17, s1
 8004836:	f7fc f93d 	bl	8000ab4 <__aeabi_dcmpun>
 800483a:	b990      	cbnz	r0, 8004862 <sqrt+0x4a>
 800483c:	2200      	movs	r2, #0
 800483e:	2300      	movs	r3, #0
 8004840:	4620      	mov	r0, r4
 8004842:	4629      	mov	r1, r5
 8004844:	f7fc f90e 	bl	8000a64 <__aeabi_dcmplt>
 8004848:	b158      	cbz	r0, 8004862 <sqrt+0x4a>
 800484a:	f7ff fdad 	bl	80043a8 <__errno>
 800484e:	2321      	movs	r3, #33	; 0x21
 8004850:	6003      	str	r3, [r0, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	2300      	movs	r3, #0
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f7fb ffbb 	bl	80007d4 <__aeabi_ddiv>
 800485e:	ec41 0b18 	vmov	d8, r0, r1
 8004862:	eeb0 0a48 	vmov.f32	s0, s16
 8004866:	eef0 0a68 	vmov.f32	s1, s17
 800486a:	ecbd 8b02 	vpop	{d8}
 800486e:	bd38      	pop	{r3, r4, r5, pc}

08004870 <__ieee754_rem_pio2>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	ed2d 8b02 	vpush	{d8}
 8004878:	ec55 4b10 	vmov	r4, r5, d0
 800487c:	4bca      	ldr	r3, [pc, #808]	; (8004ba8 <__ieee754_rem_pio2+0x338>)
 800487e:	b08b      	sub	sp, #44	; 0x2c
 8004880:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004884:	4598      	cmp	r8, r3
 8004886:	4682      	mov	sl, r0
 8004888:	9502      	str	r5, [sp, #8]
 800488a:	dc08      	bgt.n	800489e <__ieee754_rem_pio2+0x2e>
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	ed80 0b00 	vstr	d0, [r0]
 8004894:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004898:	f04f 0b00 	mov.w	fp, #0
 800489c:	e028      	b.n	80048f0 <__ieee754_rem_pio2+0x80>
 800489e:	4bc3      	ldr	r3, [pc, #780]	; (8004bac <__ieee754_rem_pio2+0x33c>)
 80048a0:	4598      	cmp	r8, r3
 80048a2:	dc78      	bgt.n	8004996 <__ieee754_rem_pio2+0x126>
 80048a4:	9b02      	ldr	r3, [sp, #8]
 80048a6:	4ec2      	ldr	r6, [pc, #776]	; (8004bb0 <__ieee754_rem_pio2+0x340>)
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	ee10 0a10 	vmov	r0, s0
 80048ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8004b70 <__ieee754_rem_pio2+0x300>)
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	4629      	mov	r1, r5
 80048b6:	dd39      	ble.n	800492c <__ieee754_rem_pio2+0xbc>
 80048b8:	f7fb fcaa 	bl	8000210 <__aeabi_dsub>
 80048bc:	45b0      	cmp	r8, r6
 80048be:	4604      	mov	r4, r0
 80048c0:	460d      	mov	r5, r1
 80048c2:	d01b      	beq.n	80048fc <__ieee754_rem_pio2+0x8c>
 80048c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x308>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fca1 	bl	8000210 <__aeabi_dsub>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	e9ca 2300 	strd	r2, r3, [sl]
 80048d6:	4620      	mov	r0, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	f7fb fc99 	bl	8000210 <__aeabi_dsub>
 80048de:	a3a6      	add	r3, pc, #664	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x308>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f7fb fc94 	bl	8000210 <__aeabi_dsub>
 80048e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048ec:	f04f 0b01 	mov.w	fp, #1
 80048f0:	4658      	mov	r0, fp
 80048f2:	b00b      	add	sp, #44	; 0x2c
 80048f4:	ecbd 8b02 	vpop	{d8}
 80048f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b80 <__ieee754_rem_pio2+0x310>)
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f7fb fc85 	bl	8000210 <__aeabi_dsub>
 8004906:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b88 <__ieee754_rem_pio2+0x318>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	4604      	mov	r4, r0
 800490e:	460d      	mov	r5, r1
 8004910:	f7fb fc7e 	bl	8000210 <__aeabi_dsub>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	e9ca 2300 	strd	r2, r3, [sl]
 800491c:	4620      	mov	r0, r4
 800491e:	4629      	mov	r1, r5
 8004920:	f7fb fc76 	bl	8000210 <__aeabi_dsub>
 8004924:	a398      	add	r3, pc, #608	; (adr r3, 8004b88 <__ieee754_rem_pio2+0x318>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	e7db      	b.n	80048e4 <__ieee754_rem_pio2+0x74>
 800492c:	f7fb fc72 	bl	8000214 <__adddf3>
 8004930:	45b0      	cmp	r8, r6
 8004932:	4604      	mov	r4, r0
 8004934:	460d      	mov	r5, r1
 8004936:	d016      	beq.n	8004966 <__ieee754_rem_pio2+0xf6>
 8004938:	a38f      	add	r3, pc, #572	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x308>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fc69 	bl	8000214 <__adddf3>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	e9ca 2300 	strd	r2, r3, [sl]
 800494a:	4620      	mov	r0, r4
 800494c:	4629      	mov	r1, r5
 800494e:	f7fb fc5f 	bl	8000210 <__aeabi_dsub>
 8004952:	a389      	add	r3, pc, #548	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x308>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fc5c 	bl	8000214 <__adddf3>
 800495c:	f04f 3bff 	mov.w	fp, #4294967295
 8004960:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004964:	e7c4      	b.n	80048f0 <__ieee754_rem_pio2+0x80>
 8004966:	a386      	add	r3, pc, #536	; (adr r3, 8004b80 <__ieee754_rem_pio2+0x310>)
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f7fb fc52 	bl	8000214 <__adddf3>
 8004970:	a385      	add	r3, pc, #532	; (adr r3, 8004b88 <__ieee754_rem_pio2+0x318>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	4604      	mov	r4, r0
 8004978:	460d      	mov	r5, r1
 800497a:	f7fb fc4b 	bl	8000214 <__adddf3>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	e9ca 2300 	strd	r2, r3, [sl]
 8004986:	4620      	mov	r0, r4
 8004988:	4629      	mov	r1, r5
 800498a:	f7fb fc41 	bl	8000210 <__aeabi_dsub>
 800498e:	a37e      	add	r3, pc, #504	; (adr r3, 8004b88 <__ieee754_rem_pio2+0x318>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	e7e0      	b.n	8004958 <__ieee754_rem_pio2+0xe8>
 8004996:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <__ieee754_rem_pio2+0x344>)
 8004998:	4598      	cmp	r8, r3
 800499a:	f300 80d9 	bgt.w	8004b50 <__ieee754_rem_pio2+0x2e0>
 800499e:	f7ff fed7 	bl	8004750 <fabs>
 80049a2:	ec55 4b10 	vmov	r4, r5, d0
 80049a6:	ee10 0a10 	vmov	r0, s0
 80049aa:	a379      	add	r3, pc, #484	; (adr r3, 8004b90 <__ieee754_rem_pio2+0x320>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	4629      	mov	r1, r5
 80049b2:	f7fb fde5 	bl	8000580 <__aeabi_dmul>
 80049b6:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <__ieee754_rem_pio2+0x348>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	f7fb fc2b 	bl	8000214 <__adddf3>
 80049be:	f7fc f88f 	bl	8000ae0 <__aeabi_d2iz>
 80049c2:	4683      	mov	fp, r0
 80049c4:	f7fb fd72 	bl	80004ac <__aeabi_i2d>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	ec43 2b18 	vmov	d8, r2, r3
 80049d0:	a367      	add	r3, pc, #412	; (adr r3, 8004b70 <__ieee754_rem_pio2+0x300>)
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fb fdd3 	bl	8000580 <__aeabi_dmul>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4620      	mov	r0, r4
 80049e0:	4629      	mov	r1, r5
 80049e2:	f7fb fc15 	bl	8000210 <__aeabi_dsub>
 80049e6:	a364      	add	r3, pc, #400	; (adr r3, 8004b78 <__ieee754_rem_pio2+0x308>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	4606      	mov	r6, r0
 80049ee:	460f      	mov	r7, r1
 80049f0:	ec51 0b18 	vmov	r0, r1, d8
 80049f4:	f7fb fdc4 	bl	8000580 <__aeabi_dmul>
 80049f8:	f1bb 0f1f 	cmp.w	fp, #31
 80049fc:	4604      	mov	r4, r0
 80049fe:	460d      	mov	r5, r1
 8004a00:	dc0d      	bgt.n	8004a1e <__ieee754_rem_pio2+0x1ae>
 8004a02:	4b6e      	ldr	r3, [pc, #440]	; (8004bbc <__ieee754_rem_pio2+0x34c>)
 8004a04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0c:	4543      	cmp	r3, r8
 8004a0e:	d006      	beq.n	8004a1e <__ieee754_rem_pio2+0x1ae>
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	4630      	mov	r0, r6
 8004a16:	4639      	mov	r1, r7
 8004a18:	f7fb fbfa 	bl	8000210 <__aeabi_dsub>
 8004a1c:	e00f      	b.n	8004a3e <__ieee754_rem_pio2+0x1ce>
 8004a1e:	462b      	mov	r3, r5
 8004a20:	4622      	mov	r2, r4
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	f7fb fbf3 	bl	8000210 <__aeabi_dsub>
 8004a2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004a38:	f1b8 0f10 	cmp.w	r8, #16
 8004a3c:	dc02      	bgt.n	8004a44 <__ieee754_rem_pio2+0x1d4>
 8004a3e:	e9ca 0100 	strd	r0, r1, [sl]
 8004a42:	e039      	b.n	8004ab8 <__ieee754_rem_pio2+0x248>
 8004a44:	a34e      	add	r3, pc, #312	; (adr r3, 8004b80 <__ieee754_rem_pio2+0x310>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	ec51 0b18 	vmov	r0, r1, d8
 8004a4e:	f7fb fd97 	bl	8000580 <__aeabi_dmul>
 8004a52:	4604      	mov	r4, r0
 8004a54:	460d      	mov	r5, r1
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	f7fb fbd7 	bl	8000210 <__aeabi_dsub>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4680      	mov	r8, r0
 8004a68:	4689      	mov	r9, r1
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	f7fb fbcf 	bl	8000210 <__aeabi_dsub>
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	f7fb fbcb 	bl	8000210 <__aeabi_dsub>
 8004a7a:	a343      	add	r3, pc, #268	; (adr r3, 8004b88 <__ieee754_rem_pio2+0x318>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	4604      	mov	r4, r0
 8004a82:	460d      	mov	r5, r1
 8004a84:	ec51 0b18 	vmov	r0, r1, d8
 8004a88:	f7fb fd7a 	bl	8000580 <__aeabi_dmul>
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	462b      	mov	r3, r5
 8004a90:	f7fb fbbe 	bl	8000210 <__aeabi_dsub>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4604      	mov	r4, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	f7fb fbb6 	bl	8000210 <__aeabi_dsub>
 8004aa4:	9a03      	ldr	r2, [sp, #12]
 8004aa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b31      	cmp	r3, #49	; 0x31
 8004aae:	dc24      	bgt.n	8004afa <__ieee754_rem_pio2+0x28a>
 8004ab0:	e9ca 0100 	strd	r0, r1, [sl]
 8004ab4:	4646      	mov	r6, r8
 8004ab6:	464f      	mov	r7, r9
 8004ab8:	e9da 8900 	ldrd	r8, r9, [sl]
 8004abc:	4630      	mov	r0, r6
 8004abe:	4642      	mov	r2, r8
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	f7fb fba4 	bl	8000210 <__aeabi_dsub>
 8004ac8:	462b      	mov	r3, r5
 8004aca:	4622      	mov	r2, r4
 8004acc:	f7fb fba0 	bl	8000210 <__aeabi_dsub>
 8004ad0:	9b02      	ldr	r3, [sp, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ad8:	f6bf af0a 	bge.w	80048f0 <__ieee754_rem_pio2+0x80>
 8004adc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ae0:	f8ca 3004 	str.w	r3, [sl, #4]
 8004ae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ae8:	f8ca 8000 	str.w	r8, [sl]
 8004aec:	f8ca 0008 	str.w	r0, [sl, #8]
 8004af0:	f8ca 300c 	str.w	r3, [sl, #12]
 8004af4:	f1cb 0b00 	rsb	fp, fp, #0
 8004af8:	e6fa      	b.n	80048f0 <__ieee754_rem_pio2+0x80>
 8004afa:	a327      	add	r3, pc, #156	; (adr r3, 8004b98 <__ieee754_rem_pio2+0x328>)
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	ec51 0b18 	vmov	r0, r1, d8
 8004b04:	f7fb fd3c 	bl	8000580 <__aeabi_dmul>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	460d      	mov	r5, r1
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4640      	mov	r0, r8
 8004b12:	4649      	mov	r1, r9
 8004b14:	f7fb fb7c 	bl	8000210 <__aeabi_dsub>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	460f      	mov	r7, r1
 8004b20:	4640      	mov	r0, r8
 8004b22:	4649      	mov	r1, r9
 8004b24:	f7fb fb74 	bl	8000210 <__aeabi_dsub>
 8004b28:	4622      	mov	r2, r4
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	f7fb fb70 	bl	8000210 <__aeabi_dsub>
 8004b30:	a31b      	add	r3, pc, #108	; (adr r3, 8004ba0 <__ieee754_rem_pio2+0x330>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	4604      	mov	r4, r0
 8004b38:	460d      	mov	r5, r1
 8004b3a:	ec51 0b18 	vmov	r0, r1, d8
 8004b3e:	f7fb fd1f 	bl	8000580 <__aeabi_dmul>
 8004b42:	4622      	mov	r2, r4
 8004b44:	462b      	mov	r3, r5
 8004b46:	f7fb fb63 	bl	8000210 <__aeabi_dsub>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	460d      	mov	r5, r1
 8004b4e:	e75f      	b.n	8004a10 <__ieee754_rem_pio2+0x1a0>
 8004b50:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <__ieee754_rem_pio2+0x350>)
 8004b52:	4598      	cmp	r8, r3
 8004b54:	dd36      	ble.n	8004bc4 <__ieee754_rem_pio2+0x354>
 8004b56:	ee10 2a10 	vmov	r2, s0
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb fb56 	bl	8000210 <__aeabi_dsub>
 8004b64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b68:	e9ca 0100 	strd	r0, r1, [sl]
 8004b6c:	e694      	b.n	8004898 <__ieee754_rem_pio2+0x28>
 8004b6e:	bf00      	nop
 8004b70:	54400000 	.word	0x54400000
 8004b74:	3ff921fb 	.word	0x3ff921fb
 8004b78:	1a626331 	.word	0x1a626331
 8004b7c:	3dd0b461 	.word	0x3dd0b461
 8004b80:	1a600000 	.word	0x1a600000
 8004b84:	3dd0b461 	.word	0x3dd0b461
 8004b88:	2e037073 	.word	0x2e037073
 8004b8c:	3ba3198a 	.word	0x3ba3198a
 8004b90:	6dc9c883 	.word	0x6dc9c883
 8004b94:	3fe45f30 	.word	0x3fe45f30
 8004b98:	2e000000 	.word	0x2e000000
 8004b9c:	3ba3198a 	.word	0x3ba3198a
 8004ba0:	252049c1 	.word	0x252049c1
 8004ba4:	397b839a 	.word	0x397b839a
 8004ba8:	3fe921fb 	.word	0x3fe921fb
 8004bac:	4002d97b 	.word	0x4002d97b
 8004bb0:	3ff921fb 	.word	0x3ff921fb
 8004bb4:	413921fb 	.word	0x413921fb
 8004bb8:	3fe00000 	.word	0x3fe00000
 8004bbc:	08005a20 	.word	0x08005a20
 8004bc0:	7fefffff 	.word	0x7fefffff
 8004bc4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004bc8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004bcc:	ee10 0a10 	vmov	r0, s0
 8004bd0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004bd4:	ee10 6a10 	vmov	r6, s0
 8004bd8:	460f      	mov	r7, r1
 8004bda:	f7fb ff81 	bl	8000ae0 <__aeabi_d2iz>
 8004bde:	f7fb fc65 	bl	80004ac <__aeabi_i2d>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4630      	mov	r0, r6
 8004be8:	4639      	mov	r1, r7
 8004bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bee:	f7fb fb0f 	bl	8000210 <__aeabi_dsub>
 8004bf2:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <__ieee754_rem_pio2+0x410>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f7fb fcc3 	bl	8000580 <__aeabi_dmul>
 8004bfa:	460f      	mov	r7, r1
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	f7fb ff6f 	bl	8000ae0 <__aeabi_d2iz>
 8004c02:	f7fb fc53 	bl	80004ac <__aeabi_i2d>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c12:	f7fb fafd 	bl	8000210 <__aeabi_dsub>
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <__ieee754_rem_pio2+0x410>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f7fb fcb1 	bl	8000580 <__aeabi_dmul>
 8004c1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c22:	ad04      	add	r5, sp, #16
 8004c24:	f04f 0803 	mov.w	r8, #3
 8004c28:	46a9      	mov	r9, r5
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	2700      	movs	r7, #0
 8004c2e:	4632      	mov	r2, r6
 8004c30:	463b      	mov	r3, r7
 8004c32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004c36:	46c3      	mov	fp, r8
 8004c38:	3d08      	subs	r5, #8
 8004c3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c3e:	f7fb ff07 	bl	8000a50 <__aeabi_dcmpeq>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d1f3      	bne.n	8004c2e <__ieee754_rem_pio2+0x3be>
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <__ieee754_rem_pio2+0x414>)
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4622      	mov	r2, r4
 8004c50:	465b      	mov	r3, fp
 8004c52:	4651      	mov	r1, sl
 8004c54:	4648      	mov	r0, r9
 8004c56:	f000 f993 	bl	8004f80 <__kernel_rem_pio2>
 8004c5a:	9b02      	ldr	r3, [sp, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	4683      	mov	fp, r0
 8004c60:	f6bf ae46 	bge.w	80048f0 <__ieee754_rem_pio2+0x80>
 8004c64:	e9da 2100 	ldrd	r2, r1, [sl]
 8004c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c6c:	e9ca 2300 	strd	r2, r3, [sl]
 8004c70:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004c74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c78:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004c7c:	e73a      	b.n	8004af4 <__ieee754_rem_pio2+0x284>
 8004c7e:	bf00      	nop
 8004c80:	41700000 	.word	0x41700000
 8004c84:	08005aa0 	.word	0x08005aa0

08004c88 <__ieee754_sqrt>:
 8004c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8c:	ec55 4b10 	vmov	r4, r5, d0
 8004c90:	4e55      	ldr	r6, [pc, #340]	; (8004de8 <__ieee754_sqrt+0x160>)
 8004c92:	43ae      	bics	r6, r5
 8004c94:	ee10 0a10 	vmov	r0, s0
 8004c98:	ee10 3a10 	vmov	r3, s0
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	d110      	bne.n	8004cc4 <__ieee754_sqrt+0x3c>
 8004ca2:	ee10 2a10 	vmov	r2, s0
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	f7fb fc6a 	bl	8000580 <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	f7fb faae 	bl	8000214 <__adddf3>
 8004cb8:	4604      	mov	r4, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	ec45 4b10 	vmov	d0, r4, r5
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	dc10      	bgt.n	8004cea <__ieee754_sqrt+0x62>
 8004cc8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004ccc:	4330      	orrs	r0, r6
 8004cce:	d0f5      	beq.n	8004cbc <__ieee754_sqrt+0x34>
 8004cd0:	b15d      	cbz	r5, 8004cea <__ieee754_sqrt+0x62>
 8004cd2:	ee10 2a10 	vmov	r2, s0
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	ee10 0a10 	vmov	r0, s0
 8004cdc:	f7fb fa98 	bl	8000210 <__aeabi_dsub>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	f7fb fd76 	bl	80007d4 <__aeabi_ddiv>
 8004ce8:	e7e6      	b.n	8004cb8 <__ieee754_sqrt+0x30>
 8004cea:	1512      	asrs	r2, r2, #20
 8004cec:	d074      	beq.n	8004dd8 <__ieee754_sqrt+0x150>
 8004cee:	07d4      	lsls	r4, r2, #31
 8004cf0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004cf4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004cfc:	bf5e      	ittt	pl
 8004cfe:	0fda      	lsrpl	r2, r3, #31
 8004d00:	005b      	lslpl	r3, r3, #1
 8004d02:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004d06:	2400      	movs	r4, #0
 8004d08:	0fda      	lsrs	r2, r3, #31
 8004d0a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004d0e:	107f      	asrs	r7, r7, #1
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	2516      	movs	r5, #22
 8004d14:	4620      	mov	r0, r4
 8004d16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d1a:	1886      	adds	r6, r0, r2
 8004d1c:	428e      	cmp	r6, r1
 8004d1e:	bfde      	ittt	le
 8004d20:	1b89      	suble	r1, r1, r6
 8004d22:	18b0      	addle	r0, r6, r2
 8004d24:	18a4      	addle	r4, r4, r2
 8004d26:	0049      	lsls	r1, r1, #1
 8004d28:	3d01      	subs	r5, #1
 8004d2a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004d2e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004d32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d36:	d1f0      	bne.n	8004d1a <__ieee754_sqrt+0x92>
 8004d38:	462a      	mov	r2, r5
 8004d3a:	f04f 0e20 	mov.w	lr, #32
 8004d3e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004d42:	4281      	cmp	r1, r0
 8004d44:	eb06 0c05 	add.w	ip, r6, r5
 8004d48:	dc02      	bgt.n	8004d50 <__ieee754_sqrt+0xc8>
 8004d4a:	d113      	bne.n	8004d74 <__ieee754_sqrt+0xec>
 8004d4c:	459c      	cmp	ip, r3
 8004d4e:	d811      	bhi.n	8004d74 <__ieee754_sqrt+0xec>
 8004d50:	f1bc 0f00 	cmp.w	ip, #0
 8004d54:	eb0c 0506 	add.w	r5, ip, r6
 8004d58:	da43      	bge.n	8004de2 <__ieee754_sqrt+0x15a>
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	db41      	blt.n	8004de2 <__ieee754_sqrt+0x15a>
 8004d5e:	f100 0801 	add.w	r8, r0, #1
 8004d62:	1a09      	subs	r1, r1, r0
 8004d64:	459c      	cmp	ip, r3
 8004d66:	bf88      	it	hi
 8004d68:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004d6c:	eba3 030c 	sub.w	r3, r3, ip
 8004d70:	4432      	add	r2, r6
 8004d72:	4640      	mov	r0, r8
 8004d74:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004d78:	f1be 0e01 	subs.w	lr, lr, #1
 8004d7c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004d80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d84:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d88:	d1db      	bne.n	8004d42 <__ieee754_sqrt+0xba>
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	d006      	beq.n	8004d9c <__ieee754_sqrt+0x114>
 8004d8e:	1c50      	adds	r0, r2, #1
 8004d90:	bf13      	iteet	ne
 8004d92:	3201      	addne	r2, #1
 8004d94:	3401      	addeq	r4, #1
 8004d96:	4672      	moveq	r2, lr
 8004d98:	f022 0201 	bicne.w	r2, r2, #1
 8004d9c:	1063      	asrs	r3, r4, #1
 8004d9e:	0852      	lsrs	r2, r2, #1
 8004da0:	07e1      	lsls	r1, r4, #31
 8004da2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004da6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004daa:	bf48      	it	mi
 8004dac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004db0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004db4:	4614      	mov	r4, r2
 8004db6:	e781      	b.n	8004cbc <__ieee754_sqrt+0x34>
 8004db8:	0ad9      	lsrs	r1, r3, #11
 8004dba:	3815      	subs	r0, #21
 8004dbc:	055b      	lsls	r3, r3, #21
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	d0fa      	beq.n	8004db8 <__ieee754_sqrt+0x130>
 8004dc2:	02cd      	lsls	r5, r1, #11
 8004dc4:	d50a      	bpl.n	8004ddc <__ieee754_sqrt+0x154>
 8004dc6:	f1c2 0420 	rsb	r4, r2, #32
 8004dca:	fa23 f404 	lsr.w	r4, r3, r4
 8004dce:	1e55      	subs	r5, r2, #1
 8004dd0:	4093      	lsls	r3, r2
 8004dd2:	4321      	orrs	r1, r4
 8004dd4:	1b42      	subs	r2, r0, r5
 8004dd6:	e78a      	b.n	8004cee <__ieee754_sqrt+0x66>
 8004dd8:	4610      	mov	r0, r2
 8004dda:	e7f0      	b.n	8004dbe <__ieee754_sqrt+0x136>
 8004ddc:	0049      	lsls	r1, r1, #1
 8004dde:	3201      	adds	r2, #1
 8004de0:	e7ef      	b.n	8004dc2 <__ieee754_sqrt+0x13a>
 8004de2:	4680      	mov	r8, r0
 8004de4:	e7bd      	b.n	8004d62 <__ieee754_sqrt+0xda>
 8004de6:	bf00      	nop
 8004de8:	7ff00000 	.word	0x7ff00000
 8004dec:	00000000 	.word	0x00000000

08004df0 <__kernel_cos>:
 8004df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	ec57 6b10 	vmov	r6, r7, d0
 8004df8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004dfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004e00:	ed8d 1b00 	vstr	d1, [sp]
 8004e04:	da07      	bge.n	8004e16 <__kernel_cos+0x26>
 8004e06:	ee10 0a10 	vmov	r0, s0
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fe68 	bl	8000ae0 <__aeabi_d2iz>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f000 8088 	beq.w	8004f26 <__kernel_cos+0x136>
 8004e16:	4632      	mov	r2, r6
 8004e18:	463b      	mov	r3, r7
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	f7fb fbaf 	bl	8000580 <__aeabi_dmul>
 8004e22:	4b51      	ldr	r3, [pc, #324]	; (8004f68 <__kernel_cos+0x178>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	f7fb fba9 	bl	8000580 <__aeabi_dmul>
 8004e2e:	a340      	add	r3, pc, #256	; (adr r3, 8004f30 <__kernel_cos+0x140>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	4682      	mov	sl, r0
 8004e36:	468b      	mov	fp, r1
 8004e38:	4620      	mov	r0, r4
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	f7fb fba0 	bl	8000580 <__aeabi_dmul>
 8004e40:	a33d      	add	r3, pc, #244	; (adr r3, 8004f38 <__kernel_cos+0x148>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f7fb f9e5 	bl	8000214 <__adddf3>
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f7fb fb97 	bl	8000580 <__aeabi_dmul>
 8004e52:	a33b      	add	r3, pc, #236	; (adr r3, 8004f40 <__kernel_cos+0x150>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f7fb f9da 	bl	8000210 <__aeabi_dsub>
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	462b      	mov	r3, r5
 8004e60:	f7fb fb8e 	bl	8000580 <__aeabi_dmul>
 8004e64:	a338      	add	r3, pc, #224	; (adr r3, 8004f48 <__kernel_cos+0x158>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f7fb f9d3 	bl	8000214 <__adddf3>
 8004e6e:	4622      	mov	r2, r4
 8004e70:	462b      	mov	r3, r5
 8004e72:	f7fb fb85 	bl	8000580 <__aeabi_dmul>
 8004e76:	a336      	add	r3, pc, #216	; (adr r3, 8004f50 <__kernel_cos+0x160>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f7fb f9c8 	bl	8000210 <__aeabi_dsub>
 8004e80:	4622      	mov	r2, r4
 8004e82:	462b      	mov	r3, r5
 8004e84:	f7fb fb7c 	bl	8000580 <__aeabi_dmul>
 8004e88:	a333      	add	r3, pc, #204	; (adr r3, 8004f58 <__kernel_cos+0x168>)
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f7fb f9c1 	bl	8000214 <__adddf3>
 8004e92:	4622      	mov	r2, r4
 8004e94:	462b      	mov	r3, r5
 8004e96:	f7fb fb73 	bl	8000580 <__aeabi_dmul>
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	f7fb fb6f 	bl	8000580 <__aeabi_dmul>
 8004ea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	460d      	mov	r5, r1
 8004eaa:	4630      	mov	r0, r6
 8004eac:	4639      	mov	r1, r7
 8004eae:	f7fb fb67 	bl	8000580 <__aeabi_dmul>
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7fb f9a9 	bl	8000210 <__aeabi_dsub>
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <__kernel_cos+0x17c>)
 8004ec0:	4598      	cmp	r8, r3
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	460f      	mov	r7, r1
 8004ec6:	dc10      	bgt.n	8004eea <__kernel_cos+0xfa>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4650      	mov	r0, sl
 8004ece:	4659      	mov	r1, fp
 8004ed0:	f7fb f99e 	bl	8000210 <__aeabi_dsub>
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4926      	ldr	r1, [pc, #152]	; (8004f70 <__kernel_cos+0x180>)
 8004ed8:	4602      	mov	r2, r0
 8004eda:	2000      	movs	r0, #0
 8004edc:	f7fb f998 	bl	8000210 <__aeabi_dsub>
 8004ee0:	ec41 0b10 	vmov	d0, r0, r1
 8004ee4:	b003      	add	sp, #12
 8004ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <__kernel_cos+0x184>)
 8004eec:	4920      	ldr	r1, [pc, #128]	; (8004f70 <__kernel_cos+0x180>)
 8004eee:	4598      	cmp	r8, r3
 8004ef0:	bfcc      	ite	gt
 8004ef2:	4d21      	ldrgt	r5, [pc, #132]	; (8004f78 <__kernel_cos+0x188>)
 8004ef4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004ef8:	2400      	movs	r4, #0
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fb f986 	bl	8000210 <__aeabi_dsub>
 8004f04:	4622      	mov	r2, r4
 8004f06:	4680      	mov	r8, r0
 8004f08:	4689      	mov	r9, r1
 8004f0a:	462b      	mov	r3, r5
 8004f0c:	4650      	mov	r0, sl
 8004f0e:	4659      	mov	r1, fp
 8004f10:	f7fb f97e 	bl	8000210 <__aeabi_dsub>
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	f7fb f97a 	bl	8000210 <__aeabi_dsub>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4640      	mov	r0, r8
 8004f22:	4649      	mov	r1, r9
 8004f24:	e7da      	b.n	8004edc <__kernel_cos+0xec>
 8004f26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004f60 <__kernel_cos+0x170>
 8004f2a:	e7db      	b.n	8004ee4 <__kernel_cos+0xf4>
 8004f2c:	f3af 8000 	nop.w
 8004f30:	be8838d4 	.word	0xbe8838d4
 8004f34:	bda8fae9 	.word	0xbda8fae9
 8004f38:	bdb4b1c4 	.word	0xbdb4b1c4
 8004f3c:	3e21ee9e 	.word	0x3e21ee9e
 8004f40:	809c52ad 	.word	0x809c52ad
 8004f44:	3e927e4f 	.word	0x3e927e4f
 8004f48:	19cb1590 	.word	0x19cb1590
 8004f4c:	3efa01a0 	.word	0x3efa01a0
 8004f50:	16c15177 	.word	0x16c15177
 8004f54:	3f56c16c 	.word	0x3f56c16c
 8004f58:	5555554c 	.word	0x5555554c
 8004f5c:	3fa55555 	.word	0x3fa55555
 8004f60:	00000000 	.word	0x00000000
 8004f64:	3ff00000 	.word	0x3ff00000
 8004f68:	3fe00000 	.word	0x3fe00000
 8004f6c:	3fd33332 	.word	0x3fd33332
 8004f70:	3ff00000 	.word	0x3ff00000
 8004f74:	3fe90000 	.word	0x3fe90000
 8004f78:	3fd20000 	.word	0x3fd20000
 8004f7c:	00000000 	.word	0x00000000

08004f80 <__kernel_rem_pio2>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	ed2d 8b02 	vpush	{d8}
 8004f88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004f8c:	f112 0f14 	cmn.w	r2, #20
 8004f90:	9308      	str	r3, [sp, #32]
 8004f92:	9101      	str	r1, [sp, #4]
 8004f94:	4bc4      	ldr	r3, [pc, #784]	; (80052a8 <__kernel_rem_pio2+0x328>)
 8004f96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004f98:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	9b08      	ldr	r3, [sp, #32]
 8004fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fa6:	bfa8      	it	ge
 8004fa8:	1ed4      	subge	r4, r2, #3
 8004faa:	9306      	str	r3, [sp, #24]
 8004fac:	bfb2      	itee	lt
 8004fae:	2400      	movlt	r4, #0
 8004fb0:	2318      	movge	r3, #24
 8004fb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8004fb6:	f06f 0317 	mvn.w	r3, #23
 8004fba:	fb04 3303 	mla	r3, r4, r3, r3
 8004fbe:	eb03 0a02 	add.w	sl, r3, r2
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	9a06      	ldr	r2, [sp, #24]
 8004fc6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005298 <__kernel_rem_pio2+0x318>
 8004fca:	eb03 0802 	add.w	r8, r3, r2
 8004fce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004fd0:	1aa7      	subs	r7, r4, r2
 8004fd2:	ae22      	add	r6, sp, #136	; 0x88
 8004fd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004fd8:	2500      	movs	r5, #0
 8004fda:	4545      	cmp	r5, r8
 8004fdc:	dd13      	ble.n	8005006 <__kernel_rem_pio2+0x86>
 8004fde:	9b08      	ldr	r3, [sp, #32]
 8004fe0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005298 <__kernel_rem_pio2+0x318>
 8004fe4:	aa22      	add	r2, sp, #136	; 0x88
 8004fe6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004fea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004fee:	f04f 0800 	mov.w	r8, #0
 8004ff2:	9b02      	ldr	r3, [sp, #8]
 8004ff4:	4598      	cmp	r8, r3
 8004ff6:	dc2f      	bgt.n	8005058 <__kernel_rem_pio2+0xd8>
 8004ff8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004ffc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005000:	462f      	mov	r7, r5
 8005002:	2600      	movs	r6, #0
 8005004:	e01b      	b.n	800503e <__kernel_rem_pio2+0xbe>
 8005006:	42ef      	cmn	r7, r5
 8005008:	d407      	bmi.n	800501a <__kernel_rem_pio2+0x9a>
 800500a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800500e:	f7fb fa4d 	bl	80004ac <__aeabi_i2d>
 8005012:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005016:	3501      	adds	r5, #1
 8005018:	e7df      	b.n	8004fda <__kernel_rem_pio2+0x5a>
 800501a:	ec51 0b18 	vmov	r0, r1, d8
 800501e:	e7f8      	b.n	8005012 <__kernel_rem_pio2+0x92>
 8005020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005024:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005028:	f7fb faaa 	bl	8000580 <__aeabi_dmul>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005034:	f7fb f8ee 	bl	8000214 <__adddf3>
 8005038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800503c:	3601      	adds	r6, #1
 800503e:	9b06      	ldr	r3, [sp, #24]
 8005040:	429e      	cmp	r6, r3
 8005042:	f1a7 0708 	sub.w	r7, r7, #8
 8005046:	ddeb      	ble.n	8005020 <__kernel_rem_pio2+0xa0>
 8005048:	ed9d 7b04 	vldr	d7, [sp, #16]
 800504c:	f108 0801 	add.w	r8, r8, #1
 8005050:	ecab 7b02 	vstmia	fp!, {d7}
 8005054:	3508      	adds	r5, #8
 8005056:	e7cc      	b.n	8004ff2 <__kernel_rem_pio2+0x72>
 8005058:	9b02      	ldr	r3, [sp, #8]
 800505a:	aa0e      	add	r2, sp, #56	; 0x38
 800505c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005060:	930d      	str	r3, [sp, #52]	; 0x34
 8005062:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005064:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005068:	9c02      	ldr	r4, [sp, #8]
 800506a:	930c      	str	r3, [sp, #48]	; 0x30
 800506c:	00e3      	lsls	r3, r4, #3
 800506e:	930a      	str	r3, [sp, #40]	; 0x28
 8005070:	ab9a      	add	r3, sp, #616	; 0x268
 8005072:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005076:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800507a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800507e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005080:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005084:	46c3      	mov	fp, r8
 8005086:	46a1      	mov	r9, r4
 8005088:	f1b9 0f00 	cmp.w	r9, #0
 800508c:	f1a5 0508 	sub.w	r5, r5, #8
 8005090:	dc77      	bgt.n	8005182 <__kernel_rem_pio2+0x202>
 8005092:	ec47 6b10 	vmov	d0, r6, r7
 8005096:	4650      	mov	r0, sl
 8005098:	f000 fc02 	bl	80058a0 <scalbn>
 800509c:	ec57 6b10 	vmov	r6, r7, d0
 80050a0:	2200      	movs	r2, #0
 80050a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80050a6:	ee10 0a10 	vmov	r0, s0
 80050aa:	4639      	mov	r1, r7
 80050ac:	f7fb fa68 	bl	8000580 <__aeabi_dmul>
 80050b0:	ec41 0b10 	vmov	d0, r0, r1
 80050b4:	f000 fb74 	bl	80057a0 <floor>
 80050b8:	4b7c      	ldr	r3, [pc, #496]	; (80052ac <__kernel_rem_pio2+0x32c>)
 80050ba:	ec51 0b10 	vmov	r0, r1, d0
 80050be:	2200      	movs	r2, #0
 80050c0:	f7fb fa5e 	bl	8000580 <__aeabi_dmul>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4630      	mov	r0, r6
 80050ca:	4639      	mov	r1, r7
 80050cc:	f7fb f8a0 	bl	8000210 <__aeabi_dsub>
 80050d0:	460f      	mov	r7, r1
 80050d2:	4606      	mov	r6, r0
 80050d4:	f7fb fd04 	bl	8000ae0 <__aeabi_d2iz>
 80050d8:	9004      	str	r0, [sp, #16]
 80050da:	f7fb f9e7 	bl	80004ac <__aeabi_i2d>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4630      	mov	r0, r6
 80050e4:	4639      	mov	r1, r7
 80050e6:	f7fb f893 	bl	8000210 <__aeabi_dsub>
 80050ea:	f1ba 0f00 	cmp.w	sl, #0
 80050ee:	4606      	mov	r6, r0
 80050f0:	460f      	mov	r7, r1
 80050f2:	dd6d      	ble.n	80051d0 <__kernel_rem_pio2+0x250>
 80050f4:	1e62      	subs	r2, r4, #1
 80050f6:	ab0e      	add	r3, sp, #56	; 0x38
 80050f8:	9d04      	ldr	r5, [sp, #16]
 80050fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80050fe:	f1ca 0118 	rsb	r1, sl, #24
 8005102:	fa40 f301 	asr.w	r3, r0, r1
 8005106:	441d      	add	r5, r3
 8005108:	408b      	lsls	r3, r1
 800510a:	1ac0      	subs	r0, r0, r3
 800510c:	ab0e      	add	r3, sp, #56	; 0x38
 800510e:	9504      	str	r5, [sp, #16]
 8005110:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005114:	f1ca 0317 	rsb	r3, sl, #23
 8005118:	fa40 fb03 	asr.w	fp, r0, r3
 800511c:	f1bb 0f00 	cmp.w	fp, #0
 8005120:	dd65      	ble.n	80051ee <__kernel_rem_pio2+0x26e>
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	2200      	movs	r2, #0
 8005126:	3301      	adds	r3, #1
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	4615      	mov	r5, r2
 800512c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005130:	4294      	cmp	r4, r2
 8005132:	f300 809c 	bgt.w	800526e <__kernel_rem_pio2+0x2ee>
 8005136:	f1ba 0f00 	cmp.w	sl, #0
 800513a:	dd07      	ble.n	800514c <__kernel_rem_pio2+0x1cc>
 800513c:	f1ba 0f01 	cmp.w	sl, #1
 8005140:	f000 80c0 	beq.w	80052c4 <__kernel_rem_pio2+0x344>
 8005144:	f1ba 0f02 	cmp.w	sl, #2
 8005148:	f000 80c6 	beq.w	80052d8 <__kernel_rem_pio2+0x358>
 800514c:	f1bb 0f02 	cmp.w	fp, #2
 8005150:	d14d      	bne.n	80051ee <__kernel_rem_pio2+0x26e>
 8005152:	4632      	mov	r2, r6
 8005154:	463b      	mov	r3, r7
 8005156:	4956      	ldr	r1, [pc, #344]	; (80052b0 <__kernel_rem_pio2+0x330>)
 8005158:	2000      	movs	r0, #0
 800515a:	f7fb f859 	bl	8000210 <__aeabi_dsub>
 800515e:	4606      	mov	r6, r0
 8005160:	460f      	mov	r7, r1
 8005162:	2d00      	cmp	r5, #0
 8005164:	d043      	beq.n	80051ee <__kernel_rem_pio2+0x26e>
 8005166:	4650      	mov	r0, sl
 8005168:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80052a0 <__kernel_rem_pio2+0x320>
 800516c:	f000 fb98 	bl	80058a0 <scalbn>
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	ec53 2b10 	vmov	r2, r3, d0
 8005178:	f7fb f84a 	bl	8000210 <__aeabi_dsub>
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	e035      	b.n	80051ee <__kernel_rem_pio2+0x26e>
 8005182:	4b4c      	ldr	r3, [pc, #304]	; (80052b4 <__kernel_rem_pio2+0x334>)
 8005184:	2200      	movs	r2, #0
 8005186:	4630      	mov	r0, r6
 8005188:	4639      	mov	r1, r7
 800518a:	f7fb f9f9 	bl	8000580 <__aeabi_dmul>
 800518e:	f7fb fca7 	bl	8000ae0 <__aeabi_d2iz>
 8005192:	f7fb f98b 	bl	80004ac <__aeabi_i2d>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	ec43 2b18 	vmov	d8, r2, r3
 800519e:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <__kernel_rem_pio2+0x338>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	f7fb f9ed 	bl	8000580 <__aeabi_dmul>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4630      	mov	r0, r6
 80051ac:	4639      	mov	r1, r7
 80051ae:	f7fb f82f 	bl	8000210 <__aeabi_dsub>
 80051b2:	f7fb fc95 	bl	8000ae0 <__aeabi_d2iz>
 80051b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051ba:	f84b 0b04 	str.w	r0, [fp], #4
 80051be:	ec51 0b18 	vmov	r0, r1, d8
 80051c2:	f7fb f827 	bl	8000214 <__adddf3>
 80051c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80051ca:	4606      	mov	r6, r0
 80051cc:	460f      	mov	r7, r1
 80051ce:	e75b      	b.n	8005088 <__kernel_rem_pio2+0x108>
 80051d0:	d106      	bne.n	80051e0 <__kernel_rem_pio2+0x260>
 80051d2:	1e63      	subs	r3, r4, #1
 80051d4:	aa0e      	add	r2, sp, #56	; 0x38
 80051d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80051de:	e79d      	b.n	800511c <__kernel_rem_pio2+0x19c>
 80051e0:	4b36      	ldr	r3, [pc, #216]	; (80052bc <__kernel_rem_pio2+0x33c>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	f7fb fc52 	bl	8000a8c <__aeabi_dcmpge>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d13d      	bne.n	8005268 <__kernel_rem_pio2+0x2e8>
 80051ec:	4683      	mov	fp, r0
 80051ee:	2200      	movs	r2, #0
 80051f0:	2300      	movs	r3, #0
 80051f2:	4630      	mov	r0, r6
 80051f4:	4639      	mov	r1, r7
 80051f6:	f7fb fc2b 	bl	8000a50 <__aeabi_dcmpeq>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f000 80c0 	beq.w	8005380 <__kernel_rem_pio2+0x400>
 8005200:	1e65      	subs	r5, r4, #1
 8005202:	462b      	mov	r3, r5
 8005204:	2200      	movs	r2, #0
 8005206:	9902      	ldr	r1, [sp, #8]
 8005208:	428b      	cmp	r3, r1
 800520a:	da6c      	bge.n	80052e6 <__kernel_rem_pio2+0x366>
 800520c:	2a00      	cmp	r2, #0
 800520e:	f000 8089 	beq.w	8005324 <__kernel_rem_pio2+0x3a4>
 8005212:	ab0e      	add	r3, sp, #56	; 0x38
 8005214:	f1aa 0a18 	sub.w	sl, sl, #24
 8005218:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80ad 	beq.w	800537c <__kernel_rem_pio2+0x3fc>
 8005222:	4650      	mov	r0, sl
 8005224:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80052a0 <__kernel_rem_pio2+0x320>
 8005228:	f000 fb3a 	bl	80058a0 <scalbn>
 800522c:	ab9a      	add	r3, sp, #616	; 0x268
 800522e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005232:	ec57 6b10 	vmov	r6, r7, d0
 8005236:	00ec      	lsls	r4, r5, #3
 8005238:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800523c:	46aa      	mov	sl, r5
 800523e:	f1ba 0f00 	cmp.w	sl, #0
 8005242:	f280 80d6 	bge.w	80053f2 <__kernel_rem_pio2+0x472>
 8005246:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005298 <__kernel_rem_pio2+0x318>
 800524a:	462e      	mov	r6, r5
 800524c:	2e00      	cmp	r6, #0
 800524e:	f2c0 8104 	blt.w	800545a <__kernel_rem_pio2+0x4da>
 8005252:	ab72      	add	r3, sp, #456	; 0x1c8
 8005254:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005258:	f8df a064 	ldr.w	sl, [pc, #100]	; 80052c0 <__kernel_rem_pio2+0x340>
 800525c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005260:	f04f 0800 	mov.w	r8, #0
 8005264:	1baf      	subs	r7, r5, r6
 8005266:	e0ea      	b.n	800543e <__kernel_rem_pio2+0x4be>
 8005268:	f04f 0b02 	mov.w	fp, #2
 800526c:	e759      	b.n	8005122 <__kernel_rem_pio2+0x1a2>
 800526e:	f8d8 3000 	ldr.w	r3, [r8]
 8005272:	b955      	cbnz	r5, 800528a <__kernel_rem_pio2+0x30a>
 8005274:	b123      	cbz	r3, 8005280 <__kernel_rem_pio2+0x300>
 8005276:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800527a:	f8c8 3000 	str.w	r3, [r8]
 800527e:	2301      	movs	r3, #1
 8005280:	3201      	adds	r2, #1
 8005282:	f108 0804 	add.w	r8, r8, #4
 8005286:	461d      	mov	r5, r3
 8005288:	e752      	b.n	8005130 <__kernel_rem_pio2+0x1b0>
 800528a:	1acb      	subs	r3, r1, r3
 800528c:	f8c8 3000 	str.w	r3, [r8]
 8005290:	462b      	mov	r3, r5
 8005292:	e7f5      	b.n	8005280 <__kernel_rem_pio2+0x300>
 8005294:	f3af 8000 	nop.w
	...
 80052a4:	3ff00000 	.word	0x3ff00000
 80052a8:	08005be8 	.word	0x08005be8
 80052ac:	40200000 	.word	0x40200000
 80052b0:	3ff00000 	.word	0x3ff00000
 80052b4:	3e700000 	.word	0x3e700000
 80052b8:	41700000 	.word	0x41700000
 80052bc:	3fe00000 	.word	0x3fe00000
 80052c0:	08005ba8 	.word	0x08005ba8
 80052c4:	1e62      	subs	r2, r4, #1
 80052c6:	ab0e      	add	r3, sp, #56	; 0x38
 80052c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80052d0:	a90e      	add	r1, sp, #56	; 0x38
 80052d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80052d6:	e739      	b.n	800514c <__kernel_rem_pio2+0x1cc>
 80052d8:	1e62      	subs	r2, r4, #1
 80052da:	ab0e      	add	r3, sp, #56	; 0x38
 80052dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80052e4:	e7f4      	b.n	80052d0 <__kernel_rem_pio2+0x350>
 80052e6:	a90e      	add	r1, sp, #56	; 0x38
 80052e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	430a      	orrs	r2, r1
 80052f0:	e789      	b.n	8005206 <__kernel_rem_pio2+0x286>
 80052f2:	3301      	adds	r3, #1
 80052f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80052f8:	2900      	cmp	r1, #0
 80052fa:	d0fa      	beq.n	80052f2 <__kernel_rem_pio2+0x372>
 80052fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005302:	446a      	add	r2, sp
 8005304:	3a98      	subs	r2, #152	; 0x98
 8005306:	920a      	str	r2, [sp, #40]	; 0x28
 8005308:	9a08      	ldr	r2, [sp, #32]
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	18a5      	adds	r5, r4, r2
 800530e:	aa22      	add	r2, sp, #136	; 0x88
 8005310:	f104 0801 	add.w	r8, r4, #1
 8005314:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005318:	9304      	str	r3, [sp, #16]
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	4543      	cmp	r3, r8
 800531e:	da04      	bge.n	800532a <__kernel_rem_pio2+0x3aa>
 8005320:	461c      	mov	r4, r3
 8005322:	e6a3      	b.n	800506c <__kernel_rem_pio2+0xec>
 8005324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005326:	2301      	movs	r3, #1
 8005328:	e7e4      	b.n	80052f4 <__kernel_rem_pio2+0x374>
 800532a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800532c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005330:	f7fb f8bc 	bl	80004ac <__aeabi_i2d>
 8005334:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800533a:	46ab      	mov	fp, r5
 800533c:	461c      	mov	r4, r3
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	2600      	movs	r6, #0
 8005344:	2700      	movs	r7, #0
 8005346:	9b06      	ldr	r3, [sp, #24]
 8005348:	4599      	cmp	r9, r3
 800534a:	dd06      	ble.n	800535a <__kernel_rem_pio2+0x3da>
 800534c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005352:	f108 0801 	add.w	r8, r8, #1
 8005356:	930a      	str	r3, [sp, #40]	; 0x28
 8005358:	e7df      	b.n	800531a <__kernel_rem_pio2+0x39a>
 800535a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800535e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005362:	f7fb f90d 	bl	8000580 <__aeabi_dmul>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4630      	mov	r0, r6
 800536c:	4639      	mov	r1, r7
 800536e:	f7fa ff51 	bl	8000214 <__adddf3>
 8005372:	f109 0901 	add.w	r9, r9, #1
 8005376:	4606      	mov	r6, r0
 8005378:	460f      	mov	r7, r1
 800537a:	e7e4      	b.n	8005346 <__kernel_rem_pio2+0x3c6>
 800537c:	3d01      	subs	r5, #1
 800537e:	e748      	b.n	8005212 <__kernel_rem_pio2+0x292>
 8005380:	ec47 6b10 	vmov	d0, r6, r7
 8005384:	f1ca 0000 	rsb	r0, sl, #0
 8005388:	f000 fa8a 	bl	80058a0 <scalbn>
 800538c:	ec57 6b10 	vmov	r6, r7, d0
 8005390:	4ba0      	ldr	r3, [pc, #640]	; (8005614 <__kernel_rem_pio2+0x694>)
 8005392:	ee10 0a10 	vmov	r0, s0
 8005396:	2200      	movs	r2, #0
 8005398:	4639      	mov	r1, r7
 800539a:	f7fb fb77 	bl	8000a8c <__aeabi_dcmpge>
 800539e:	b1f8      	cbz	r0, 80053e0 <__kernel_rem_pio2+0x460>
 80053a0:	4b9d      	ldr	r3, [pc, #628]	; (8005618 <__kernel_rem_pio2+0x698>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	4630      	mov	r0, r6
 80053a6:	4639      	mov	r1, r7
 80053a8:	f7fb f8ea 	bl	8000580 <__aeabi_dmul>
 80053ac:	f7fb fb98 	bl	8000ae0 <__aeabi_d2iz>
 80053b0:	4680      	mov	r8, r0
 80053b2:	f7fb f87b 	bl	80004ac <__aeabi_i2d>
 80053b6:	4b97      	ldr	r3, [pc, #604]	; (8005614 <__kernel_rem_pio2+0x694>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	f7fb f8e1 	bl	8000580 <__aeabi_dmul>
 80053be:	460b      	mov	r3, r1
 80053c0:	4602      	mov	r2, r0
 80053c2:	4639      	mov	r1, r7
 80053c4:	4630      	mov	r0, r6
 80053c6:	f7fa ff23 	bl	8000210 <__aeabi_dsub>
 80053ca:	f7fb fb89 	bl	8000ae0 <__aeabi_d2iz>
 80053ce:	1c65      	adds	r5, r4, #1
 80053d0:	ab0e      	add	r3, sp, #56	; 0x38
 80053d2:	f10a 0a18 	add.w	sl, sl, #24
 80053d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80053da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80053de:	e720      	b.n	8005222 <__kernel_rem_pio2+0x2a2>
 80053e0:	4630      	mov	r0, r6
 80053e2:	4639      	mov	r1, r7
 80053e4:	f7fb fb7c 	bl	8000ae0 <__aeabi_d2iz>
 80053e8:	ab0e      	add	r3, sp, #56	; 0x38
 80053ea:	4625      	mov	r5, r4
 80053ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80053f0:	e717      	b.n	8005222 <__kernel_rem_pio2+0x2a2>
 80053f2:	ab0e      	add	r3, sp, #56	; 0x38
 80053f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80053f8:	f7fb f858 	bl	80004ac <__aeabi_i2d>
 80053fc:	4632      	mov	r2, r6
 80053fe:	463b      	mov	r3, r7
 8005400:	f7fb f8be 	bl	8000580 <__aeabi_dmul>
 8005404:	4b84      	ldr	r3, [pc, #528]	; (8005618 <__kernel_rem_pio2+0x698>)
 8005406:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800540a:	2200      	movs	r2, #0
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb f8b6 	bl	8000580 <__aeabi_dmul>
 8005414:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
 800541c:	e70f      	b.n	800523e <__kernel_rem_pio2+0x2be>
 800541e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005422:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005426:	f7fb f8ab 	bl	8000580 <__aeabi_dmul>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005432:	f7fa feef 	bl	8000214 <__adddf3>
 8005436:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800543a:	f108 0801 	add.w	r8, r8, #1
 800543e:	9b02      	ldr	r3, [sp, #8]
 8005440:	4598      	cmp	r8, r3
 8005442:	dc01      	bgt.n	8005448 <__kernel_rem_pio2+0x4c8>
 8005444:	45b8      	cmp	r8, r7
 8005446:	ddea      	ble.n	800541e <__kernel_rem_pio2+0x49e>
 8005448:	ed9d 7b06 	vldr	d7, [sp, #24]
 800544c:	ab4a      	add	r3, sp, #296	; 0x128
 800544e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005452:	ed87 7b00 	vstr	d7, [r7]
 8005456:	3e01      	subs	r6, #1
 8005458:	e6f8      	b.n	800524c <__kernel_rem_pio2+0x2cc>
 800545a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800545c:	2b02      	cmp	r3, #2
 800545e:	dc0b      	bgt.n	8005478 <__kernel_rem_pio2+0x4f8>
 8005460:	2b00      	cmp	r3, #0
 8005462:	dc35      	bgt.n	80054d0 <__kernel_rem_pio2+0x550>
 8005464:	d059      	beq.n	800551a <__kernel_rem_pio2+0x59a>
 8005466:	9b04      	ldr	r3, [sp, #16]
 8005468:	f003 0007 	and.w	r0, r3, #7
 800546c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005470:	ecbd 8b02 	vpop	{d8}
 8005474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005478:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800547a:	2b03      	cmp	r3, #3
 800547c:	d1f3      	bne.n	8005466 <__kernel_rem_pio2+0x4e6>
 800547e:	ab4a      	add	r3, sp, #296	; 0x128
 8005480:	4423      	add	r3, r4
 8005482:	9306      	str	r3, [sp, #24]
 8005484:	461c      	mov	r4, r3
 8005486:	469a      	mov	sl, r3
 8005488:	9502      	str	r5, [sp, #8]
 800548a:	9b02      	ldr	r3, [sp, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f1aa 0a08 	sub.w	sl, sl, #8
 8005492:	dc6b      	bgt.n	800556c <__kernel_rem_pio2+0x5ec>
 8005494:	46aa      	mov	sl, r5
 8005496:	f1ba 0f01 	cmp.w	sl, #1
 800549a:	f1a4 0408 	sub.w	r4, r4, #8
 800549e:	f300 8085 	bgt.w	80055ac <__kernel_rem_pio2+0x62c>
 80054a2:	9c06      	ldr	r4, [sp, #24]
 80054a4:	2000      	movs	r0, #0
 80054a6:	3408      	adds	r4, #8
 80054a8:	2100      	movs	r1, #0
 80054aa:	2d01      	cmp	r5, #1
 80054ac:	f300 809d 	bgt.w	80055ea <__kernel_rem_pio2+0x66a>
 80054b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80054b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80054b8:	f1bb 0f00 	cmp.w	fp, #0
 80054bc:	f040 809b 	bne.w	80055f6 <__kernel_rem_pio2+0x676>
 80054c0:	9b01      	ldr	r3, [sp, #4]
 80054c2:	e9c3 5600 	strd	r5, r6, [r3]
 80054c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80054ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80054ce:	e7ca      	b.n	8005466 <__kernel_rem_pio2+0x4e6>
 80054d0:	3408      	adds	r4, #8
 80054d2:	ab4a      	add	r3, sp, #296	; 0x128
 80054d4:	441c      	add	r4, r3
 80054d6:	462e      	mov	r6, r5
 80054d8:	2000      	movs	r0, #0
 80054da:	2100      	movs	r1, #0
 80054dc:	2e00      	cmp	r6, #0
 80054de:	da36      	bge.n	800554e <__kernel_rem_pio2+0x5ce>
 80054e0:	f1bb 0f00 	cmp.w	fp, #0
 80054e4:	d039      	beq.n	800555a <__kernel_rem_pio2+0x5da>
 80054e6:	4602      	mov	r2, r0
 80054e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054ec:	9c01      	ldr	r4, [sp, #4]
 80054ee:	e9c4 2300 	strd	r2, r3, [r4]
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80054fa:	f7fa fe89 	bl	8000210 <__aeabi_dsub>
 80054fe:	ae4c      	add	r6, sp, #304	; 0x130
 8005500:	2401      	movs	r4, #1
 8005502:	42a5      	cmp	r5, r4
 8005504:	da2c      	bge.n	8005560 <__kernel_rem_pio2+0x5e0>
 8005506:	f1bb 0f00 	cmp.w	fp, #0
 800550a:	d002      	beq.n	8005512 <__kernel_rem_pio2+0x592>
 800550c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005510:	4619      	mov	r1, r3
 8005512:	9b01      	ldr	r3, [sp, #4]
 8005514:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005518:	e7a5      	b.n	8005466 <__kernel_rem_pio2+0x4e6>
 800551a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800551e:	eb0d 0403 	add.w	r4, sp, r3
 8005522:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005526:	2000      	movs	r0, #0
 8005528:	2100      	movs	r1, #0
 800552a:	2d00      	cmp	r5, #0
 800552c:	da09      	bge.n	8005542 <__kernel_rem_pio2+0x5c2>
 800552e:	f1bb 0f00 	cmp.w	fp, #0
 8005532:	d002      	beq.n	800553a <__kernel_rem_pio2+0x5ba>
 8005534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005538:	4619      	mov	r1, r3
 800553a:	9b01      	ldr	r3, [sp, #4]
 800553c:	e9c3 0100 	strd	r0, r1, [r3]
 8005540:	e791      	b.n	8005466 <__kernel_rem_pio2+0x4e6>
 8005542:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005546:	f7fa fe65 	bl	8000214 <__adddf3>
 800554a:	3d01      	subs	r5, #1
 800554c:	e7ed      	b.n	800552a <__kernel_rem_pio2+0x5aa>
 800554e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005552:	f7fa fe5f 	bl	8000214 <__adddf3>
 8005556:	3e01      	subs	r6, #1
 8005558:	e7c0      	b.n	80054dc <__kernel_rem_pio2+0x55c>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	e7c5      	b.n	80054ec <__kernel_rem_pio2+0x56c>
 8005560:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005564:	f7fa fe56 	bl	8000214 <__adddf3>
 8005568:	3401      	adds	r4, #1
 800556a:	e7ca      	b.n	8005502 <__kernel_rem_pio2+0x582>
 800556c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005570:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005574:	9b02      	ldr	r3, [sp, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	9302      	str	r3, [sp, #8]
 800557a:	4632      	mov	r2, r6
 800557c:	463b      	mov	r3, r7
 800557e:	4640      	mov	r0, r8
 8005580:	4649      	mov	r1, r9
 8005582:	f7fa fe47 	bl	8000214 <__adddf3>
 8005586:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4640      	mov	r0, r8
 8005590:	4649      	mov	r1, r9
 8005592:	f7fa fe3d 	bl	8000210 <__aeabi_dsub>
 8005596:	4632      	mov	r2, r6
 8005598:	463b      	mov	r3, r7
 800559a:	f7fa fe3b 	bl	8000214 <__adddf3>
 800559e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80055a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80055a6:	ed8a 7b00 	vstr	d7, [sl]
 80055aa:	e76e      	b.n	800548a <__kernel_rem_pio2+0x50a>
 80055ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80055b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80055b4:	4640      	mov	r0, r8
 80055b6:	4632      	mov	r2, r6
 80055b8:	463b      	mov	r3, r7
 80055ba:	4649      	mov	r1, r9
 80055bc:	f7fa fe2a 	bl	8000214 <__adddf3>
 80055c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4640      	mov	r0, r8
 80055ca:	4649      	mov	r1, r9
 80055cc:	f7fa fe20 	bl	8000210 <__aeabi_dsub>
 80055d0:	4632      	mov	r2, r6
 80055d2:	463b      	mov	r3, r7
 80055d4:	f7fa fe1e 	bl	8000214 <__adddf3>
 80055d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80055e0:	ed84 7b00 	vstr	d7, [r4]
 80055e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e8:	e755      	b.n	8005496 <__kernel_rem_pio2+0x516>
 80055ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055ee:	f7fa fe11 	bl	8000214 <__adddf3>
 80055f2:	3d01      	subs	r5, #1
 80055f4:	e759      	b.n	80054aa <__kernel_rem_pio2+0x52a>
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	9a01      	ldr	r2, [sp, #4]
 80055fa:	601d      	str	r5, [r3, #0]
 80055fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005600:	605c      	str	r4, [r3, #4]
 8005602:	609f      	str	r7, [r3, #8]
 8005604:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005608:	60d3      	str	r3, [r2, #12]
 800560a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800560e:	6110      	str	r0, [r2, #16]
 8005610:	6153      	str	r3, [r2, #20]
 8005612:	e728      	b.n	8005466 <__kernel_rem_pio2+0x4e6>
 8005614:	41700000 	.word	0x41700000
 8005618:	3e700000 	.word	0x3e700000
 800561c:	00000000 	.word	0x00000000

08005620 <__kernel_sin>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	ed2d 8b04 	vpush	{d8-d9}
 8005628:	eeb0 8a41 	vmov.f32	s16, s2
 800562c:	eef0 8a61 	vmov.f32	s17, s3
 8005630:	ec55 4b10 	vmov	r4, r5, d0
 8005634:	b083      	sub	sp, #12
 8005636:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800563a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800563e:	9001      	str	r0, [sp, #4]
 8005640:	da06      	bge.n	8005650 <__kernel_sin+0x30>
 8005642:	ee10 0a10 	vmov	r0, s0
 8005646:	4629      	mov	r1, r5
 8005648:	f7fb fa4a 	bl	8000ae0 <__aeabi_d2iz>
 800564c:	2800      	cmp	r0, #0
 800564e:	d051      	beq.n	80056f4 <__kernel_sin+0xd4>
 8005650:	4622      	mov	r2, r4
 8005652:	462b      	mov	r3, r5
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa ff92 	bl	8000580 <__aeabi_dmul>
 800565c:	4682      	mov	sl, r0
 800565e:	468b      	mov	fp, r1
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4620      	mov	r0, r4
 8005666:	4629      	mov	r1, r5
 8005668:	f7fa ff8a 	bl	8000580 <__aeabi_dmul>
 800566c:	a341      	add	r3, pc, #260	; (adr r3, 8005774 <__kernel_sin+0x154>)
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	4680      	mov	r8, r0
 8005674:	4689      	mov	r9, r1
 8005676:	4650      	mov	r0, sl
 8005678:	4659      	mov	r1, fp
 800567a:	f7fa ff81 	bl	8000580 <__aeabi_dmul>
 800567e:	a33f      	add	r3, pc, #252	; (adr r3, 800577c <__kernel_sin+0x15c>)
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f7fa fdc4 	bl	8000210 <__aeabi_dsub>
 8005688:	4652      	mov	r2, sl
 800568a:	465b      	mov	r3, fp
 800568c:	f7fa ff78 	bl	8000580 <__aeabi_dmul>
 8005690:	a33c      	add	r3, pc, #240	; (adr r3, 8005784 <__kernel_sin+0x164>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f7fa fdbd 	bl	8000214 <__adddf3>
 800569a:	4652      	mov	r2, sl
 800569c:	465b      	mov	r3, fp
 800569e:	f7fa ff6f 	bl	8000580 <__aeabi_dmul>
 80056a2:	a33a      	add	r3, pc, #232	; (adr r3, 800578c <__kernel_sin+0x16c>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f7fa fdb2 	bl	8000210 <__aeabi_dsub>
 80056ac:	4652      	mov	r2, sl
 80056ae:	465b      	mov	r3, fp
 80056b0:	f7fa ff66 	bl	8000580 <__aeabi_dmul>
 80056b4:	a337      	add	r3, pc, #220	; (adr r3, 8005794 <__kernel_sin+0x174>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa fdab 	bl	8000214 <__adddf3>
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	4606      	mov	r6, r0
 80056c2:	460f      	mov	r7, r1
 80056c4:	b9eb      	cbnz	r3, 8005702 <__kernel_sin+0xe2>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4650      	mov	r0, sl
 80056cc:	4659      	mov	r1, fp
 80056ce:	f7fa ff57 	bl	8000580 <__aeabi_dmul>
 80056d2:	a325      	add	r3, pc, #148	; (adr r3, 8005768 <__kernel_sin+0x148>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fa fd9a 	bl	8000210 <__aeabi_dsub>
 80056dc:	4642      	mov	r2, r8
 80056de:	464b      	mov	r3, r9
 80056e0:	f7fa ff4e 	bl	8000580 <__aeabi_dmul>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fa fd92 	bl	8000214 <__adddf3>
 80056f0:	4604      	mov	r4, r0
 80056f2:	460d      	mov	r5, r1
 80056f4:	ec45 4b10 	vmov	d0, r4, r5
 80056f8:	b003      	add	sp, #12
 80056fa:	ecbd 8b04 	vpop	{d8-d9}
 80056fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005702:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <__kernel_sin+0x150>)
 8005704:	ec51 0b18 	vmov	r0, r1, d8
 8005708:	2200      	movs	r2, #0
 800570a:	f7fa ff39 	bl	8000580 <__aeabi_dmul>
 800570e:	4632      	mov	r2, r6
 8005710:	ec41 0b19 	vmov	d9, r0, r1
 8005714:	463b      	mov	r3, r7
 8005716:	4640      	mov	r0, r8
 8005718:	4649      	mov	r1, r9
 800571a:	f7fa ff31 	bl	8000580 <__aeabi_dmul>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	ec51 0b19 	vmov	r0, r1, d9
 8005726:	f7fa fd73 	bl	8000210 <__aeabi_dsub>
 800572a:	4652      	mov	r2, sl
 800572c:	465b      	mov	r3, fp
 800572e:	f7fa ff27 	bl	8000580 <__aeabi_dmul>
 8005732:	ec53 2b18 	vmov	r2, r3, d8
 8005736:	f7fa fd6b 	bl	8000210 <__aeabi_dsub>
 800573a:	a30b      	add	r3, pc, #44	; (adr r3, 8005768 <__kernel_sin+0x148>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	4640      	mov	r0, r8
 8005746:	4649      	mov	r1, r9
 8005748:	f7fa ff1a 	bl	8000580 <__aeabi_dmul>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fa fd5e 	bl	8000214 <__adddf3>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4620      	mov	r0, r4
 800575e:	4629      	mov	r1, r5
 8005760:	f7fa fd56 	bl	8000210 <__aeabi_dsub>
 8005764:	e7c4      	b.n	80056f0 <__kernel_sin+0xd0>
 8005766:	bf00      	nop
 8005768:	55555549 	.word	0x55555549
 800576c:	3fc55555 	.word	0x3fc55555
 8005770:	3fe00000 	.word	0x3fe00000
 8005774:	5acfd57c 	.word	0x5acfd57c
 8005778:	3de5d93a 	.word	0x3de5d93a
 800577c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005780:	3e5ae5e6 	.word	0x3e5ae5e6
 8005784:	57b1fe7d 	.word	0x57b1fe7d
 8005788:	3ec71de3 	.word	0x3ec71de3
 800578c:	19c161d5 	.word	0x19c161d5
 8005790:	3f2a01a0 	.word	0x3f2a01a0
 8005794:	1110f8a6 	.word	0x1110f8a6
 8005798:	3f811111 	.word	0x3f811111
 800579c:	00000000 	.word	0x00000000

080057a0 <floor>:
 80057a0:	ec51 0b10 	vmov	r0, r1, d0
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80057ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80057b0:	2e13      	cmp	r6, #19
 80057b2:	ee10 5a10 	vmov	r5, s0
 80057b6:	ee10 8a10 	vmov	r8, s0
 80057ba:	460c      	mov	r4, r1
 80057bc:	dc32      	bgt.n	8005824 <floor+0x84>
 80057be:	2e00      	cmp	r6, #0
 80057c0:	da14      	bge.n	80057ec <floor+0x4c>
 80057c2:	a333      	add	r3, pc, #204	; (adr r3, 8005890 <floor+0xf0>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f7fa fd24 	bl	8000214 <__adddf3>
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	f7fb f966 	bl	8000aa0 <__aeabi_dcmpgt>
 80057d4:	b138      	cbz	r0, 80057e6 <floor+0x46>
 80057d6:	2c00      	cmp	r4, #0
 80057d8:	da57      	bge.n	800588a <floor+0xea>
 80057da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80057de:	431d      	orrs	r5, r3
 80057e0:	d001      	beq.n	80057e6 <floor+0x46>
 80057e2:	4c2d      	ldr	r4, [pc, #180]	; (8005898 <floor+0xf8>)
 80057e4:	2500      	movs	r5, #0
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	e025      	b.n	8005838 <floor+0x98>
 80057ec:	4f2b      	ldr	r7, [pc, #172]	; (800589c <floor+0xfc>)
 80057ee:	4137      	asrs	r7, r6
 80057f0:	ea01 0307 	and.w	r3, r1, r7
 80057f4:	4303      	orrs	r3, r0
 80057f6:	d01f      	beq.n	8005838 <floor+0x98>
 80057f8:	a325      	add	r3, pc, #148	; (adr r3, 8005890 <floor+0xf0>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa fd09 	bl	8000214 <__adddf3>
 8005802:	2200      	movs	r2, #0
 8005804:	2300      	movs	r3, #0
 8005806:	f7fb f94b 	bl	8000aa0 <__aeabi_dcmpgt>
 800580a:	2800      	cmp	r0, #0
 800580c:	d0eb      	beq.n	80057e6 <floor+0x46>
 800580e:	2c00      	cmp	r4, #0
 8005810:	bfbe      	ittt	lt
 8005812:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005816:	fa43 f606 	asrlt.w	r6, r3, r6
 800581a:	19a4      	addlt	r4, r4, r6
 800581c:	ea24 0407 	bic.w	r4, r4, r7
 8005820:	2500      	movs	r5, #0
 8005822:	e7e0      	b.n	80057e6 <floor+0x46>
 8005824:	2e33      	cmp	r6, #51	; 0x33
 8005826:	dd0b      	ble.n	8005840 <floor+0xa0>
 8005828:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800582c:	d104      	bne.n	8005838 <floor+0x98>
 800582e:	ee10 2a10 	vmov	r2, s0
 8005832:	460b      	mov	r3, r1
 8005834:	f7fa fcee 	bl	8000214 <__adddf3>
 8005838:	ec41 0b10 	vmov	d0, r0, r1
 800583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005840:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	fa23 f707 	lsr.w	r7, r3, r7
 800584c:	4207      	tst	r7, r0
 800584e:	d0f3      	beq.n	8005838 <floor+0x98>
 8005850:	a30f      	add	r3, pc, #60	; (adr r3, 8005890 <floor+0xf0>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f7fa fcdd 	bl	8000214 <__adddf3>
 800585a:	2200      	movs	r2, #0
 800585c:	2300      	movs	r3, #0
 800585e:	f7fb f91f 	bl	8000aa0 <__aeabi_dcmpgt>
 8005862:	2800      	cmp	r0, #0
 8005864:	d0bf      	beq.n	80057e6 <floor+0x46>
 8005866:	2c00      	cmp	r4, #0
 8005868:	da02      	bge.n	8005870 <floor+0xd0>
 800586a:	2e14      	cmp	r6, #20
 800586c:	d103      	bne.n	8005876 <floor+0xd6>
 800586e:	3401      	adds	r4, #1
 8005870:	ea25 0507 	bic.w	r5, r5, r7
 8005874:	e7b7      	b.n	80057e6 <floor+0x46>
 8005876:	2301      	movs	r3, #1
 8005878:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800587c:	fa03 f606 	lsl.w	r6, r3, r6
 8005880:	4435      	add	r5, r6
 8005882:	4545      	cmp	r5, r8
 8005884:	bf38      	it	cc
 8005886:	18e4      	addcc	r4, r4, r3
 8005888:	e7f2      	b.n	8005870 <floor+0xd0>
 800588a:	2500      	movs	r5, #0
 800588c:	462c      	mov	r4, r5
 800588e:	e7aa      	b.n	80057e6 <floor+0x46>
 8005890:	8800759c 	.word	0x8800759c
 8005894:	7e37e43c 	.word	0x7e37e43c
 8005898:	bff00000 	.word	0xbff00000
 800589c:	000fffff 	.word	0x000fffff

080058a0 <scalbn>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	ec55 4b10 	vmov	r4, r5, d0
 80058a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80058aa:	4606      	mov	r6, r0
 80058ac:	462b      	mov	r3, r5
 80058ae:	b99a      	cbnz	r2, 80058d8 <scalbn+0x38>
 80058b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80058b4:	4323      	orrs	r3, r4
 80058b6:	d036      	beq.n	8005926 <scalbn+0x86>
 80058b8:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <scalbn+0x100>)
 80058ba:	4629      	mov	r1, r5
 80058bc:	ee10 0a10 	vmov	r0, s0
 80058c0:	2200      	movs	r2, #0
 80058c2:	f7fa fe5d 	bl	8000580 <__aeabi_dmul>
 80058c6:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <scalbn+0x104>)
 80058c8:	429e      	cmp	r6, r3
 80058ca:	4604      	mov	r4, r0
 80058cc:	460d      	mov	r5, r1
 80058ce:	da10      	bge.n	80058f2 <scalbn+0x52>
 80058d0:	a32b      	add	r3, pc, #172	; (adr r3, 8005980 <scalbn+0xe0>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	e03a      	b.n	800594e <scalbn+0xae>
 80058d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80058dc:	428a      	cmp	r2, r1
 80058de:	d10c      	bne.n	80058fa <scalbn+0x5a>
 80058e0:	ee10 2a10 	vmov	r2, s0
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fc94 	bl	8000214 <__adddf3>
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	e019      	b.n	8005926 <scalbn+0x86>
 80058f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058f6:	460b      	mov	r3, r1
 80058f8:	3a36      	subs	r2, #54	; 0x36
 80058fa:	4432      	add	r2, r6
 80058fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005900:	428a      	cmp	r2, r1
 8005902:	dd08      	ble.n	8005916 <scalbn+0x76>
 8005904:	2d00      	cmp	r5, #0
 8005906:	a120      	add	r1, pc, #128	; (adr r1, 8005988 <scalbn+0xe8>)
 8005908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800590c:	da1c      	bge.n	8005948 <scalbn+0xa8>
 800590e:	a120      	add	r1, pc, #128	; (adr r1, 8005990 <scalbn+0xf0>)
 8005910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005914:	e018      	b.n	8005948 <scalbn+0xa8>
 8005916:	2a00      	cmp	r2, #0
 8005918:	dd08      	ble.n	800592c <scalbn+0x8c>
 800591a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800591e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005922:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005926:	ec45 4b10 	vmov	d0, r4, r5
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005930:	da19      	bge.n	8005966 <scalbn+0xc6>
 8005932:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005936:	429e      	cmp	r6, r3
 8005938:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800593c:	dd0a      	ble.n	8005954 <scalbn+0xb4>
 800593e:	a112      	add	r1, pc, #72	; (adr r1, 8005988 <scalbn+0xe8>)
 8005940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e2      	bne.n	800590e <scalbn+0x6e>
 8005948:	a30f      	add	r3, pc, #60	; (adr r3, 8005988 <scalbn+0xe8>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fe17 	bl	8000580 <__aeabi_dmul>
 8005952:	e7cb      	b.n	80058ec <scalbn+0x4c>
 8005954:	a10a      	add	r1, pc, #40	; (adr r1, 8005980 <scalbn+0xe0>)
 8005956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0b8      	beq.n	80058d0 <scalbn+0x30>
 800595e:	a10e      	add	r1, pc, #56	; (adr r1, 8005998 <scalbn+0xf8>)
 8005960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005964:	e7b4      	b.n	80058d0 <scalbn+0x30>
 8005966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800596a:	3236      	adds	r2, #54	; 0x36
 800596c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005970:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005974:	4620      	mov	r0, r4
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <scalbn+0x108>)
 8005978:	2200      	movs	r2, #0
 800597a:	e7e8      	b.n	800594e <scalbn+0xae>
 800597c:	f3af 8000 	nop.w
 8005980:	c2f8f359 	.word	0xc2f8f359
 8005984:	01a56e1f 	.word	0x01a56e1f
 8005988:	8800759c 	.word	0x8800759c
 800598c:	7e37e43c 	.word	0x7e37e43c
 8005990:	8800759c 	.word	0x8800759c
 8005994:	fe37e43c 	.word	0xfe37e43c
 8005998:	c2f8f359 	.word	0xc2f8f359
 800599c:	81a56e1f 	.word	0x81a56e1f
 80059a0:	43500000 	.word	0x43500000
 80059a4:	ffff3cb0 	.word	0xffff3cb0
 80059a8:	3c900000 	.word	0x3c900000

080059ac <_init>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	bf00      	nop
 80059b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b2:	bc08      	pop	{r3}
 80059b4:	469e      	mov	lr, r3
 80059b6:	4770      	bx	lr

080059b8 <_fini>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr
